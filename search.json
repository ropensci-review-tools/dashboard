[
  {
    "objectID": "reviews.html",
    "href": "reviews.html",
    "title": "Software Review Overview",
    "section": "",
    "text": "There are currently:\nSome cells in the following tables are highlighted to visually indicate the following degrees of urgency. Levels of urgency depend on the review stage. Approximate expected times required to complete each stage are:\nLevels of urgency for each review are times taken for current stage as a multiple of those base times, with values rounded down to nearest integer. For example, a submission which has been undergoing 1\\/Editor Checks for 17 days would have an urgency of floor(17/7) = 2. A submission which has been under review (stage 3\\/Reviewer(s) Assigned) for 12 weeks would have an urgency of floor(12 * 7 / 21) = 4. The colour codes for these urgency levels are shown in the following table.\nurgency\nimportance\n\n\n\n\n1\nlow\n\n\n2\nmoderate\n\n\n3\nmedium\n\n\n4\nhigh\n\n\n5\nvery high"
  },
  {
    "objectID": "reviews.html#pre-submission",
    "href": "reviews.html#pre-submission",
    "title": "Software Review Overview",
    "section": "0/Pre-submission",
    "text": "0/Pre-submission\nThere is 1 labelled pre-submission issue, and 0 unlabelled issues. Data on the labelled issue are:\n\n\n\n\n\n\n\n\n\n\nnumber\ntitle\nstats\nstage_date\neditor\ninactive_for\n\n\n\n\n562\ncat2cat: Handling an Inconsistently Coded Categorical Variable in a Panel Dataset\nFALSE\n2022-12-16\n(None)\n2 months"
  },
  {
    "objectID": "reviews.html#editor-checks",
    "href": "reviews.html#editor-checks",
    "title": "Software Review Overview",
    "section": "1/Editor Checks",
    "text": "1/Editor Checks\n\n\n\n\n\n\n\n\n\n\nnumber\ntitle\nstats\nstage_date\neditor\ninactive_for\n\n\n\n\n626\ngigs: Assess Fetal, Newborn, and Child Growth with International Standards\nTRUE\n2024-02-23\n@rkillick\n5 weeks\n\n\n633\nosmapiR: an implementation of OpenStreetMap API v0.6 for R\nFALSE\n2024-04-10\n@adamhsparks\n5 days"
  },
  {
    "objectID": "reviews.html#seeking-reviewers",
    "href": "reviews.html#seeking-reviewers",
    "title": "Software Review Overview",
    "section": "2/Seeking Reviewers",
    "text": "2/Seeking Reviewers\n\n\n\n\n\n\n\n\n\n\nnumber\ntitle\nstats\nstage_date\neditor\ninactive_for\n\n\n\n\n637\ncancerprof: API Client for extracting data from State Cancer Profiles\nFALSE\n2024-04-16\n@ldecicco-USGS\n6 days\n\n\n636\nrsi: Efficiently Retrieve and Process Satellite Imagery\nFALSE\n2024-04-11\n@jhollist\n5 days"
  },
  {
    "objectID": "reviews.html#reviewers-assigned",
    "href": "reviews.html#reviewers-assigned",
    "title": "Software Review Overview",
    "section": "3/Reviewer(s) Assigned",
    "text": "3/Reviewer(s) Assigned\n\n\n\n\n\n\n\n\n\n\nnumber\ntitle\nstats\nstage_date\neditor\ninactive_for\n\n\n\n\n546\nfwildclusterboot submission\nTRUE\n2023-05-08\n@helske\n2 months"
  },
  {
    "objectID": "reviews.html#reviews-in-awaiting-changes",
    "href": "reviews.html#reviews-in-awaiting-changes",
    "title": "Software Review Overview",
    "section": "4/Review(s) in Awaiting Changes",
    "text": "4/Review(s) in Awaiting Changes\n\n\n\n\n\n\n\n\n\n\nnumber\ntitle\nstats\nstage_date\neditor\ninactive_for\n\n\n\n\n599\nagroclimatico: Índices y Estadísticos Climáticos e Hidrológicos\nFALSE\n2024-02-13\n@Pakillo\n2 months\n\n\n608\nrgeeExtra: An extensions for 'rgee'\nFALSE\n2024-01-17\n@maurolepore\n2 months\n\n\n625\nrix: Reproducible Environments with Nix\nFALSE\n2024-03-12\n@ldecicco-USGS\n2 weeks\n\n\n620\nAprendiendo programación en R con la robot Karel\nFALSE\n2024-04-03\n@maurolepore\n3 days\n\n\n612\nImplementation of OPTRAM algorithm to derive soil moisture from remote sensing imagery\nFALSE\n2024-04-22\n@adamhsparks\n1 day"
  },
  {
    "objectID": "reviews.html#awaiting-reviewers-response",
    "href": "reviews.html#awaiting-reviewers-response",
    "title": "Software Review Overview",
    "section": "5/Awaiting Reviewer(s) Response",
    "text": "5/Awaiting Reviewer(s) Response\n\n\n\n\n\n\n\n\n\n\nnumber\ntitle\nstats\nstage_date\neditor\ninactive_for\n\n\n\n\n590\nmregions2: Access Data from Marineregions.org: The Marine Regions Gazetteer and the Marine Regions Data Products\nFALSE\n2023-11-25\n@jooolia\n2 weeks\n\n\n627\ndendroNetwork\nFALSE\n2024-04-09\n@ldecicco-USGS\n7 days"
  },
  {
    "objectID": "reviews.html#holding",
    "href": "reviews.html#holding",
    "title": "Software Review Overview",
    "section": "Holding",
    "text": "Holding\n\n\n\n\n\n\n\n\n\n\nnumber\ntitle\nstats\nstage\non_hold_for\n\n\n\n\n553\ndataset: Create Data Frames that are Easier to Exchange and Reuse\nFALSE\n1/editor-checks\n19 months\n\n\n524\nrhud: A R interface for the US Department of Housing and Urban Development APIs\nFALSE\n4/review(s)-in-awaiting-changes\n16 months\n\n\n572\nqualtdict: Generating Variable Dictionaries and Labelled Data Exports of Qualtrics Surveys\nFALSE\n1/editor-checks\n3 months\n\n\n489\nSubmission of bssm for Bayesian state space modelling\nTRUE\n2/seeking-reviewer(s)\n2 months\n\n\n556\ndfms: Efficient Estimation of Dynamic Factor Models for R\nTRUE\n3/reviewer(s)-assigned\n2 months\n\n\n575\nsubmission: pangoling: Access to word predictability using large language (transformer) models\nFALSE\n3/reviewer(s)-assigned\n2 months"
  },
  {
    "objectID": "ed-reviews.html",
    "href": "ed-reviews.html",
    "title": "Editor Reviews",
    "section": "",
    "text": "This panel provides data on reviews handled by each editor. Data are shown for current editors only, with reviews listed from most to least recent. Open reviews are highlighted in yellow.\n\nedReviewsIn = transpose (ed_reviews_in)\n// And get array of unique eds for input selector:\neditorsAll = edReviewsIn.map(function(item) {\n    return item.editor;\n});\neditors = Array.from(new Set(editorsAll));\n\n// Adds 'rowColor' variable:\nedReviews = {\n    return edReviewsIn.map(row =&gt; ({\n        ...row,\n        rowColor: row.state === \"OPEN\" ? \"yellow\" : \"transparent\",\n    }));\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nviewof editor = Inputs.select(editors, {multiple: false, label: \"Editor:\"})\nviewof state = Inputs.checkbox(\n    [\"OPEN\", \"CLOSED\"],\n    { value: [\"OPEN\"], label: \"Issue State:\" }\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfiltered = edReviews.filter(function(ed) {\n  return editor.includes(ed.editor) && state.includes(ed.state)\n})\nn_filtered = filtered.length;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsortColumn = \"number\"\n\n// This sorts in reverse order:\nfilteredSorted = filtered.sort((a, b) =&gt; {\n  if (a[sortColumn] &lt; b[sortColumn]) {\n    return 1;\n  }\n  if (a[sortColumn] &gt; b[sortColumn]) {\n    return -1;\n  }\n  return 0;\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Definition of colorTable function, adapted from\n// https://observablehq.com/@mootari/colored-table-rows\n// This can't be placed in a separate file, because that requires importing\n// observable/table, but there is no path here to do that import.\nfunction colorTable(data, {\n        colorColumn,\n        colorOpacity = 0.5,\n        editorColumn,\n        lastActiveColumn,\n        issueNumColumn,\n        columns = undefined,\n        format = {}, ...options}) {\n  const [row] = data;\n  if(!row) return Inputs.table(data, options);\n  \n  let index = Object.keys(row).indexOf(colorColumn);\n  if(index &lt; 0) throw Error(\"colorColumn not found in data\");\n  if(format[colorColumn]) throw Error(\"colorColumn is reserved\");\n  if(columns && columns.indexOf(colorColumn) &lt; 0) columns.push(colorColumn);\n  if(columns) index = columns.indexOf(colorColumn);\n  const nth = `nth-child(${index + 2})`;\n\n  // Observable Table doesn't know about rows, so need to convert the\n  // \"lastActiveColumn\" into an array with the issue number and last active\n  // string so then pass to the `format` call below to construct &lt;a&gt; href\n  // objects:\n  const preprocessedData = data.map(row =&gt; ({\n     ...row,\n     [lastActiveColumn]: [row[issueNumColumn],row[lastActiveColumn]]\n  }));``\n\n  const form = Inputs.table(preprocessedData, {\n    format: {\n      ...format,\n      [colorColumn]: d =&gt; htl.html`&lt;div style=\"--row-color:${d}\"&gt;`,\n      [editorColumn]: d =&gt; htl.html`&lt;a href=\"https://github.com/${d}\"&gt;${d}&lt;/a&gt;`,\n      [lastActiveColumn]: d =&gt; htl.html`&lt;a href=\"https://github.com/ropensci/software-review/issues/${d[0]}\"&gt;${d[1]}&lt;/a&gt;`,\n    },\n    columns,\n    ...options\n  });\n\n  const scope = DOM.uid().id;\n  form.classList.add(scope);\n  \n  form.append(htl.html`&lt;style&gt;\n\n    /* Ensure that the sticky header always stays on top */\n    .${scope} thead { position: relative; z-index: 2 }\n\n    /* Hide the last column */\n    .${scope} th:${nth},\n    .${scope} td:${nth} { width: 0; padding: 0 }\n    .${scope} th:${nth} { visibility: hidden }\n\n    /* Inject the background color */\n    .${scope} tr { position: relative }\n    .${scope} td:${nth} div:after {\n      opacity: ${colorOpacity};\n      content: \"\";\n      display: block;\n      height: 100%;\n      width: 100%;\n      position: absolute;\n      left: 0;\n      top: 0;\n      z-index: -1;\n      background-color: var(--row-color);\n    }\n  `);\n\n  return form;\n}\n\n\n\n\n\n\n\nnumberColumn = \"number\"\ncolumns = [\"number\", \"title\", \"state\", \"opened_at\", \"closed_at\"]\n\ncolorTable(filteredSorted,\n  {\n    colorColumn: \"rowColor\",\n    editorColumn: \"editor\",\n    issueNumColumn: \"number\",\n    columns: columns,\n    format: {\n      [numberColumn]: d =&gt; htl.html`&lt;a href=\"https://github.com/ropensci/software-review/issues/${d}\"&gt;${d}&lt;/a&gt;`,\n    },\n    height: 'auto',\n  }\n)"
  },
  {
    "objectID": "editors.html",
    "href": "editors.html",
    "title": "rOpenSci Editors",
    "section": "",
    "text": "The following interactive table summarises the availability of our editorial team. This information is intended to help identify editors who may be available to handle new submissions to rOpenSci’s software peer-review system. Values are sorted by the periods of time since editors were last active in peer review threads (the “last_active” column), sorted in decreasing order so the first editors are those who have been inactive for the longest time. The choice of editors should also be made in a way that best distributes the recent editorial loads depicted in the Past Editorial Load section.\nThe “Stats” selector can be used to select statistical software (“true”) or general (“false”) editors (or both). Editors with a status of “FREE” are highlighted yellow in the table, which by default only shows “FREE” editors. The “Languages” column only describes whether editors are capable of handling submissions in any languages other than English currently accepted by rOpenSci.\n\n// This adds a 'rowColor' variable to the editor data\neditorData = {\n    return transpose(ed_status_in).map(row =&gt; ({\n        ...row,\n        rowColor: row.status === \"FREE\" ? \"yellow\" : \"transparent\",\n    }));\n}\n\n\n\n\n\n\n\nviewof stats = Inputs.checkbox(\n    [true, false],\n    { value: [false], \n        label: \"Stats:\"\n    }\n)\nviewof status = Inputs.checkbox(\n    [\"FREE\", \"BUSY\", \"ON LEAVE\"], \n    { value: [\"FREE\"], \n        label: \"Editor Status:\"\n    }\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfiltered = editorData.filter(function(editor) {\n  return status.includes(editor.status) &&\n         stats.includes(editor.stats);\n})\n\nsortColumn = \"inactive_days\"\n\n// This sorts in reverse order:\nfilteredSorted = filtered.sort((a, b) =&gt; {\n  if (a[sortColumn] &lt; b[sortColumn]) {\n    return 1;\n  }\n  if (a[sortColumn] &gt; b[sortColumn]) {\n    return -1;\n  }\n  return 0;\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Definition of colorTable function, adapted from\n// https://observablehq.com/@mootari/colored-table-rows\n// This can't be placed in a separate file, because that requires importing\n// observable/table, but there is no path here to do that import.\nfunction colorTable(data, {\n        colorColumn,\n        colorOpacity = 0.5,\n        editorColumn,\n        lastActiveColumn,\n        issueNumColumn,\n        columns = undefined,\n        format = {}, ...options}) {\n  const [row] = data;\n  if(!row) return Inputs.table(data, options);\n  \n  let index = Object.keys(row).indexOf(colorColumn);\n  if(index &lt; 0) throw Error(\"colorColumn not found in data\");\n  if(format[colorColumn]) throw Error(\"colorColumn is reserved\");\n  if(columns && columns.indexOf(colorColumn) &lt; 0) columns.push(colorColumn);\n  if(columns) index = columns.indexOf(colorColumn);\n  const nth = `nth-child(${index + 2})`;\n\n  // Observable Table doesn't know about rows, so need to convert the\n  // \"lastActiveColumn\" into an array with the issue number and last active\n  // string so then pass to the `format` call below to construct &lt;a&gt; href\n  // objects:\n  const preprocessedData = data.map(row =&gt; ({\n     ...row,\n     [lastActiveColumn]: [row[issueNumColumn],row[lastActiveColumn]]\n  }));``\n\n  const form = Inputs.table(preprocessedData, {\n    format: {\n      ...format,\n      [colorColumn]: d =&gt; htl.html`&lt;div style=\"--row-color:${d}\"&gt;`,\n      [editorColumn]: d =&gt; htl.html`&lt;a href=\"https://github.com/${d}\"&gt;${d}&lt;/a&gt;`,\n      [lastActiveColumn]: d =&gt; htl.html`&lt;a href=\"https://github.com/ropensci/software-review/issues/${d[0]}\"&gt;${d[1]}&lt;/a&gt;`,\n    },\n    columns,\n    ...options\n  });\n\n  const scope = DOM.uid().id;\n  form.classList.add(scope);\n  \n  form.append(htl.html`&lt;style&gt;\n\n    /* Ensure that the sticky header always stays on top */\n    .${scope} thead { position: relative; z-index: 2 }\n\n    /* Hide the last column */\n    .${scope} th:${nth},\n    .${scope} td:${nth} { width: 0; padding: 0 }\n    .${scope} th:${nth} { visibility: hidden }\n\n    /* Inject the background color */\n    .${scope} tr { position: relative }\n    .${scope} td:${nth} div:after {\n      opacity: ${colorOpacity};\n      content: \"\";\n      display: block;\n      height: 100%;\n      width: 100%;\n      position: absolute;\n      left: 0;\n      top: 0;\n      z-index: -1;\n      background-color: var(--row-color);\n    }\n  `);\n\n  return form;\n}\n\n\n\n\n\n\n\ncolumns = [\"editor\", \"last_active\", \"status\", \"stats\", \"Languages\", \"Expertise\"]\ncolorTable(filteredSorted,\n  {\n    colorColumn: \"rowColor\",\n    editorColumn: \"editor\",\n    lastActiveColumn: \"last_active\",\n    issueNumColumn: \"number\",\n    columns: columns,\n    height: 'auto',\n  }\n)"
  },
  {
    "objectID": "editors.html#editor-overview",
    "href": "editors.html#editor-overview",
    "title": "rOpenSci Editors",
    "section": "",
    "text": "The following interactive table summarises the availability of our editorial team. This information is intended to help identify editors who may be available to handle new submissions to rOpenSci’s software peer-review system. Values are sorted by the periods of time since editors were last active in peer review threads (the “last_active” column), sorted in decreasing order so the first editors are those who have been inactive for the longest time. The choice of editors should also be made in a way that best distributes the recent editorial loads depicted in the Past Editorial Load section.\nThe “Stats” selector can be used to select statistical software (“true”) or general (“false”) editors (or both). Editors with a status of “FREE” are highlighted yellow in the table, which by default only shows “FREE” editors. The “Languages” column only describes whether editors are capable of handling submissions in any languages other than English currently accepted by rOpenSci.\n\n// This adds a 'rowColor' variable to the editor data\neditorData = {\n    return transpose(ed_status_in).map(row =&gt; ({\n        ...row,\n        rowColor: row.status === \"FREE\" ? \"yellow\" : \"transparent\",\n    }));\n}\n\n\n\n\n\n\n\nviewof stats = Inputs.checkbox(\n    [true, false],\n    { value: [false], \n        label: \"Stats:\"\n    }\n)\nviewof status = Inputs.checkbox(\n    [\"FREE\", \"BUSY\", \"ON LEAVE\"], \n    { value: [\"FREE\"], \n        label: \"Editor Status:\"\n    }\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfiltered = editorData.filter(function(editor) {\n  return status.includes(editor.status) &&\n         stats.includes(editor.stats);\n})\n\nsortColumn = \"inactive_days\"\n\n// This sorts in reverse order:\nfilteredSorted = filtered.sort((a, b) =&gt; {\n  if (a[sortColumn] &lt; b[sortColumn]) {\n    return 1;\n  }\n  if (a[sortColumn] &gt; b[sortColumn]) {\n    return -1;\n  }\n  return 0;\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Definition of colorTable function, adapted from\n// https://observablehq.com/@mootari/colored-table-rows\n// This can't be placed in a separate file, because that requires importing\n// observable/table, but there is no path here to do that import.\nfunction colorTable(data, {\n        colorColumn,\n        colorOpacity = 0.5,\n        editorColumn,\n        lastActiveColumn,\n        issueNumColumn,\n        columns = undefined,\n        format = {}, ...options}) {\n  const [row] = data;\n  if(!row) return Inputs.table(data, options);\n  \n  let index = Object.keys(row).indexOf(colorColumn);\n  if(index &lt; 0) throw Error(\"colorColumn not found in data\");\n  if(format[colorColumn]) throw Error(\"colorColumn is reserved\");\n  if(columns && columns.indexOf(colorColumn) &lt; 0) columns.push(colorColumn);\n  if(columns) index = columns.indexOf(colorColumn);\n  const nth = `nth-child(${index + 2})`;\n\n  // Observable Table doesn't know about rows, so need to convert the\n  // \"lastActiveColumn\" into an array with the issue number and last active\n  // string so then pass to the `format` call below to construct &lt;a&gt; href\n  // objects:\n  const preprocessedData = data.map(row =&gt; ({\n     ...row,\n     [lastActiveColumn]: [row[issueNumColumn],row[lastActiveColumn]]\n  }));``\n\n  const form = Inputs.table(preprocessedData, {\n    format: {\n      ...format,\n      [colorColumn]: d =&gt; htl.html`&lt;div style=\"--row-color:${d}\"&gt;`,\n      [editorColumn]: d =&gt; htl.html`&lt;a href=\"https://github.com/${d}\"&gt;${d}&lt;/a&gt;`,\n      [lastActiveColumn]: d =&gt; htl.html`&lt;a href=\"https://github.com/ropensci/software-review/issues/${d[0]}\"&gt;${d[1]}&lt;/a&gt;`,\n    },\n    columns,\n    ...options\n  });\n\n  const scope = DOM.uid().id;\n  form.classList.add(scope);\n  \n  form.append(htl.html`&lt;style&gt;\n\n    /* Ensure that the sticky header always stays on top */\n    .${scope} thead { position: relative; z-index: 2 }\n\n    /* Hide the last column */\n    .${scope} th:${nth},\n    .${scope} td:${nth} { width: 0; padding: 0 }\n    .${scope} th:${nth} { visibility: hidden }\n\n    /* Inject the background color */\n    .${scope} tr { position: relative }\n    .${scope} td:${nth} div:after {\n      opacity: ${colorOpacity};\n      content: \"\";\n      display: block;\n      height: 100%;\n      width: 100%;\n      position: absolute;\n      left: 0;\n      top: 0;\n      z-index: -1;\n      background-color: var(--row-color);\n    }\n  `);\n\n  return form;\n}\n\n\n\n\n\n\n\ncolumns = [\"editor\", \"last_active\", \"status\", \"stats\", \"Languages\", \"Expertise\"]\ncolorTable(filteredSorted,\n  {\n    colorColumn: \"rowColor\",\n    editorColumn: \"editor\",\n    lastActiveColumn: \"last_active\",\n    issueNumColumn: \"number\",\n    columns: columns,\n    height: 'auto',\n  }\n)"
  },
  {
    "objectID": "editors.html#past-ed-load",
    "href": "editors.html#past-ed-load",
    "title": "rOpenSci Editors",
    "section": "Editorial Load",
    "text": "Editorial Load\nThe following sections summarise the recent workload of our editorial team. We aim to distribute our workload as evenly as possible across the editorial team. Editors for new submissions should accordingly be chosen from those who have had relatively low recent workloads. All of the following data and graphs exclude any editors who are currently on leave.\n\nIndividual Editor Load: New Submissions\nThis first graph shows the number of new submissions per quarter taken on by each editor. We aim to allocate no more than one new submission to each editor per quarter, or a maximum of four per year. Each block in this graph represents a quarter-year, so values should not exceed one. Editors for incoming reviews should preferably be chosen from those who have not handled any submissions in the present or preceding quarters.\n\n\n\n\n\n\n\n\n\n\nIndividual Editor Load: Concurrent Reviews\nThe following graph shows numbers of concurrent reviews handled by editors over the preceding 2 years. We aim to distribute workloads across editors as evenly as possible, and this graph should be used in addition to the above graph to aid that task. Note that we have no specific upper limits on numbers of concurrent reviews, and reviews may extend over long time periods with very little editorial intervention. Nevertheless, low numbers of concurrent reviews may be interpreted to reflect relatively low editorial workload."
  },
  {
    "objectID": "editors.html#numbers-of-editors",
    "href": "editors.html#numbers-of-editors",
    "title": "rOpenSci Editors",
    "section": "Numbers of Editors",
    "text": "Numbers of Editors\nrOpenSci relies on our team of volunteer editors. We can only provide review services if we have sufficient numbers of editors available to handle submissions. It is therefore important to monitor historical trends in overall editor availability. This first graph shows total numbers of editors over time, and corresponding lines for numbers of those engaged during each time period in ongoing reviews, and numbers who are not handling any submissions during each period and are therefore free to accept new submissions.\nThis number of “Free” editors may include those who have yet to edit their first submissions, in which case these will not appear in any subsequent graphs. Thus the total number in this first graph may be greater than identifiable numbers from any subsequent graphs."
  },
  {
    "objectID": "history.html",
    "href": "history.html",
    "title": "Software Review History",
    "section": "",
    "text": "This chart shows the total number of packages submitted for review each quarter. Main lines shows numbers of reviews for all packages, with trends distinguishing general review from statistical software review starting from September 2021. Prior to this time, all reviews were “general”."
  },
  {
    "objectID": "history.html#package-submissions",
    "href": "history.html#package-submissions",
    "title": "Software Review History",
    "section": "",
    "text": "This chart shows the total number of packages submitted for review each quarter. Main lines shows numbers of reviews for all packages, with trends distinguishing general review from statistical software review starting from September 2021. Prior to this time, all reviews were “general”."
  },
  {
    "objectID": "history.html#packages-under-review",
    "href": "history.html#packages-under-review",
    "title": "Software Review History",
    "section": "Packages under review",
    "text": "Packages under review\nThis chart shows numbers of packages simultaneously under review each quarter, with same lines as previous graph."
  },
  {
    "objectID": "history.html#review-duration",
    "href": "history.html#review-duration",
    "title": "Software Review History",
    "section": "Review duration",
    "text": "Review duration\nThe next chart shows the average duration of the review process, plotted against the months in which each review started. (The data have been slightly smoothed to aid visual display.)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "rOpenSci Software Review Dashboard",
    "section": "",
    "text": "This dashboard provides an overview of all current rOpenSci software review issues, and of editor availability and past editorial workloads. The dashboard includes the following components:\n\nThe rOpenSci Editors page which provides information to help identify editors who may be free to handle new submissions.\nThe Editor Reviews page which provides an overview of all current and previous issues handled by each current editor.\nThe Software Review Overview page which provides an overview of all currently open submissions to the software peer-review system. This page is primarily intended to provide an overview of the current state of software peer-review for the Editors-in-Charge, and in particular to identify reviews in need of attention.\nThe Software Review History page which gives insights into the historical developments of the software peer-review program.\n\nSource code for this dashboard is at github.com/ropensci-review-tools/dashboard. Contributions are welcome! Please feel free to open an issue in that repository."
  }
]