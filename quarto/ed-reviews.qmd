---
title: "Editor Reviews"
execute:
  echo: false
format: 
  html:
    fig-width: 8
    fig-height: 4
    code-fold: false
---

```{r load-pkg-ed-rev, echo = FALSE, message = FALSE}
library (dashboard)
```

```{r get-ed-dat, echo = FALSE, message = FALSE}
#| cache: true
ed_dat <- editor_status (quiet = TRUE)
```
```{r prepro-ed-dat}
#| cache: false
ed_reviews <- ed_dat$reviews
ojs_define (ed_reviews_in = ed_reviews)
```

This panel provides data on reviews handled by each editor. Data are shown for
current editors only, with reviews listed from most to least recent. Open
reviews are highlighted in yellow.

```{ojs}
edReviewsIn = transpose(ed_reviews_in)
// And get array of unique eds for input selector:
editorsAll = edReviewsIn.map(function(item) {
    return item.editor;
});
editors = Array.from(new Set(editorsAll));

// Add 'rowColor' variable:
edReviews = {
    return edReviewsIn.map(row => ({
        ...row,
        rowColor: row.state === "OPEN" ? "yellow" : "transparent",
    }));
}
```

```{ojs}
viewof editor = Inputs.select(editors, {multiple: false, label: "Editor:"})
viewof state = Inputs.checkbox(
    ["OPEN", "CLOSED"],
    { value: ["OPEN"], label: "Issue State:" }
)
```

```{ojs}
filtered = edReviews.filter(function(ed) {
  return editor.includes(ed.editor) && state.includes(ed.state)
})
n_filtered = filtered.length;
```

```{ojs}
sortColumn = "number"

// This sorts in reverse order:
filteredSorted = filtered.sort((a, b) => {
  if (a[sortColumn] < b[sortColumn]) {
    return 1;
  }
  if (a[sortColumn] > b[sortColumn]) {
    return -1;
  }
  return 0;
});

```

{{< include _colorTable_fn.qmd >}}

```{ojs}
numberColumn = "number"
columns = ["number", "title", "state", "opened_at", "closed_at"]

colorTable(filteredSorted,
  {
    colorColumn: "rowColor",
    editorColumn: "editor",
    issueNumColumn: "number",
    columns: columns,
    format: {
      [numberColumn]: d => htl.html`<a href="https://github.com/ropensci/software-review/issues/${d}">${d}</a>`,
    },
    height: 'auto',
  }
)
```
