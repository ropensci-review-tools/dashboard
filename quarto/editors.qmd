---
title: "rOpenSci Editors"
format: 
  html:
    fig-width: 8
    fig-height: 4
    code-fold: false
---

```{r get-ed-dat, echo = FALSE, message = FALSE}
#| cache: true
library (dashboard)
library (gt)
library (ggplot2)
library (tidyr)
library (dplyr)
library (viridis)
ed_dat <- editor_status (quiet = TRUE)
ed_status <- ed_dat$status
ed_timeline <- ed_dat$timeline
```

## Editor Overview

This page includes tables summarising the availability of editors, and charts
of historical activity for each editor. This information is intended to help
identify editors who may be available to handle new submissions to rOpenSci's
software peer-review system. Editors should be chosen by first ensuring they
are "FREE" in one of the first two tables. The historical patterns of editorial
activity should then be examined in the subsequent charts. The choice of
editors should also be made in a way that best distributes the recent editorial
loads depicted in the [*Past Editorial Load*](#past-ed-load) section.


```{r has-free, echo = FALSE}
some_eds_are_free <- length (ed_status$stats == "FREE") > 0L
msg <- paste0 (
    "The `inactive_for` column in the first two tables includes values ",
    "hyperlinked to the most recent submission issue for each editor."
)
```
```{r has-no-free-txt, echo = FALSE, results = "asis", eval = !some_eds_are_free}
cat (msg)
```
```{r has-free-txt, echo = FALSE, results = "asis", eval = some_eds_are_free}
cat (paste0 (
    msg,
    " The initial rows are highlighted yellow to ",
    "indicate editors who are currently free."
))
```


```{r editor-add_airtable-data, echo = FALSE}
edvac <- dashboard::editor_vacation_status ()
editors_on_vacation <- edvac$github [which (edvac$away)]
ed_status$status [ed_status$editor %in% editors_on_vacation] <- "ON LEAVE"
ed_status <- dashboard::add_editor_airtable_data (ed_status)
ed_status <- dplyr::filter (ed_status, editor != "haozhu233") |>
    dplyr::relocate (other_langs, .before = domain_expertise) |>
    dplyr::rename (
        "Languages" = other_langs,
        "Expertise" = domain_expertise
    )
```

### General Editors


```{r editor-table, echo = FALSE}
#| label: fig-editors-general
ed_dat_gen <- ed_status [which (!ed_status$stats), ]
ed_dat_gen$status <- factor (ed_dat_gen$status, levels = c ("FREE", "BUSY", "ON LEAVE"))
ed_dat_gen <- dplyr::group_by (ed_dat_gen, status) |>
    dplyr::arrange (dplyr::desc (inactive_days), .by_group = TRUE) |>
    dplyr::ungroup ()

u <- "https://github.com/ropensci/software-review/issues/"
ed_dat_gen <- dashboard:::add_gt_html (ed_dat_gen, u, what = "inactive_for")

gt::gt (
    ed_dat_gen,
    groupname_col = "status"
) |>
    gt::tab_header ("Editor Status Overview") |>
    gt::cols_hide (c (stats, inactive_days, number, state)) |>
    gt::tab_style (
        style = list (gt::cell_fill (color = "#FFFF8088")),
        locations = gt::cells_body (
            columns = c (`editor`, `inactive_for`),
            rows = status == "FREE"
        )
    ) |>
    dashboard:::add_bg_colours ()
```

### Statistical Editors


```{r editor-table, echo = FALSE}
#| label: fig-editors-stats
ed_dat_stats <- ed_status [which (ed_status$stats), ]
ed_dat_stats$status <- factor (ed_dat_stats$status, levels = c ("FREE", "BUSY", "ON LEAVE"))
ed_dat_stats <- dplyr::group_by (ed_dat_stats, status) |>
    dplyr::arrange (dplyr::desc (inactive_days), .by_group = TRUE) |>
    dplyr::ungroup ()

u <- "https://github.com/ropensci/software-review/issues/"
ed_dat_stats <- dashboard:::add_gt_html (ed_dat_stats, u, what = "inactive_for")

gt::gt (
    ed_dat_stats,
    groupname_col = "status"
) |>
    gt::tab_header ("Editor Status Overview") |>
    gt::cols_hide (c (stats, inactive_days, number, state)) |>
    gt::tab_style (
        style = list (gt::cell_fill (color = "#FFFF8088")),
        locations = gt::cells_body (
            columns = c (`editor`, `inactive_for`),
            rows = status == "FREE"
        )
    ) |>
    dashboard:::add_bg_colours ()
```

## Past Editorial Load {#past-ed-load}

The following two graphs illustrate the previous load of each editor. The
thickness of lines represents numbers of concurrent submissions handled by each
editor. These charts are intended as an additional aid in selecting handling
editors. Editors who have had relatively low recent loads should be chosen in
favor of those who have recently had higher loads.


```{r timeline-prepro, echo = FALSE}
start_time <- lubridate::ymd ("2020-01-01")
timeline <- dplyr::filter (ed_timeline, month >= start_time) |>
    dplyr::filter (!name %in% c ("haozhu233"))
xlab_pos <- as.Date (min (timeline$month) - lubridate::dmonths (12))
eds_stats <- ed_status$editor [which (ed_status$stats)]
timeline_stats <- timeline [timeline$name %in% eds_stats, ]
timeline <- timeline [!timeline$name %in% eds_stats, ]
timeline$y <- match (timeline$y, unique (timeline$y))
timeline_stats$y <- match (timeline_stats$y, unique (timeline_stats$y))
```

### General editors

This first chart illustrates the historical loads for general (non-statistical)
editors.

::: {style="all.initial;"}
```{r timeline-ed-plot, echo = FALSE, fig.width = 8, fig.height = 8}
ggplot2::ggplot (timeline, ggplot2::aes (x = month, y = y, colour = name)) +
    ggplot2::geom_line (ggplot2::aes (linewidth = value)) +
    ggplot2::scale_linewidth (range = c (1, 25)) +
    ggplot2::geom_text (
        ggplot2::aes (x = xlab_pos, y = y, label = name),
        hjust = 0,
        vjust = 0.5,
        fontface = "plain",
        size = 4,
        colour = "black"
    ) +
    ggplot2::xlab ("Year") +
    viridis::scale_color_viridis (discrete = TRUE) +
    ggplot2::theme (
        axis.text.y = ggplot2::element_blank (),
        axis.ticks.y = ggplot2::element_blank (),
        axis.title.y = ggplot2::element_blank (),
        legend.position = "none",
        plot.margin = ggplot2::margin (1, 1, 1, 1, "cm")
    )
```
:::

### Statistical editors

This  chart illustrates the historical loads for statistical editors.

```{r set-fig-ht, echo = FALSE}
# Scale height of next fig to proportional decrease in number of lines
opts <- knitr::opts_chunk$get ()
neds <- length (unique (timeline$name))
neds_stats <- length (unique (timeline_stats$name))
ht <- ceiling (8 * neds_stats / neds) + 1
knitr::opts_chunk$set (fig.height = ht)
```


::: {style="all.initial;"}
```{r timeline-stats-ed-plot, echo = FALSE, fig.width = 8}
ggplot2::ggplot (timeline_stats, ggplot2::aes (x = month, y = y, colour = name)) +
    ggplot2::geom_line (ggplot2::aes (linewidth = value)) +
    ggplot2::scale_linewidth (range = c (1, 25)) +
    ggplot2::geom_text (
        ggplot2::aes (x = xlab_pos, y = y, label = name),
        hjust = 0,
        vjust = 0.5,
        fontface = "plain",
        size = 4,
        colour = "black"
    ) +
    ggplot2::xlab ("Year") +
    ggplot2::scale_y_continuous (limits = c (0.5, neds_stats + 0.5)) +
    viridis::scale_color_viridis (discrete = TRUE) +
    ggplot2::theme (
        axis.text.y = ggplot2::element_blank (),
        axis.ticks.y = ggplot2::element_blank (),
        axis.title.y = ggplot2::element_blank (),
        legend.position = "none",
        plot.margin = ggplot2::margin (0, 1, 0, 1, "cm")
    )
```
:::

```{r reset-fig-ht, echo = FALSE}
knitr::opts_chunk$set (fig.height = opts$fig.height)
```
