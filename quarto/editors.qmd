---
title: "rOpenSci Editors"
format: 
  html:
    fig-width: 8
    fig-height: 8
    code-fold: false
---

```{r load-pkg-ed, echo = FALSE, message = FALSE}
library (dashboard)
library (gt)
library (ggplot2)
library (tidyr)
library (dplyr)
library (ggiraph)
```

```{r get-ed-dat, echo = FALSE, message = FALSE}
#| cache: true
aggregation_period <- "quarter"
ed_dat <- editor_status (aggregation_period = aggregation_period, quiet = TRUE)
ed_status <- ed_dat$status
ed_timeline_total <- ed_dat$timeline_total |>
    dplyr::filter (name %in% ed_status$editor)
ed_timeline_new <- ed_dat$timeline_new |>
    dplyr::filter (name %in% ed_status$editor)
```

## Editor Overview {#editor-overview}

This page includes tables summarising the availability of editors, and charts
of historical activity for each editor. This information is intended to help
identify editors who may be available to handle new submissions to rOpenSci's
software peer-review system. Editors should be chosen by first ensuring they
are "FREE" in one of the first two tables. The historical patterns of editorial
activity should then be examined in the subsequent charts. The choice of
editors should also be made in a way that best distributes the recent editorial
loads depicted in the [*Past Editorial Load*](#past-ed-load) section.


```{r has-free, echo = FALSE}
some_eds_are_free <- length (ed_status$stats == "FREE") > 0L
msg <- paste0 (
    "The `inactive_for` column in the first two tables includes values ",
    "hyperlinked to the most recent submission issue for each editor."
)
```
```{r has-no-free-txt, echo = FALSE, results = "asis", eval = !some_eds_are_free}
cat (msg)
```
```{r has-free-txt, echo = FALSE, results = "asis", eval = some_eds_are_free}
cat (paste0 (
    msg,
    " The initial rows are highlighted yellow to ",
    "indicate editors who are currently free."
))
```


```{r editor-add_airtable-data, echo = FALSE}
#| cache: true
edvac <- dashboard::editor_vacation_status ()
editors_on_vacation <- edvac$github [which (edvac$away)]
ed_status$status [ed_status$editor %in% editors_on_vacation] <- "ON LEAVE"
ed_status <- dashboard::add_editor_airtable_data (ed_status)
ed_status <- dplyr::filter (ed_status, editor != "haozhu233") |>
    dplyr::relocate (other_langs, .before = domain_expertise) |>
    dplyr::rename (
        "Languages" = other_langs,
        "Expertise" = domain_expertise
    ) |>
    tidyr::replace_na (list (inactive_for = "(waiting)"))
```

### General Editors


```{r editor-table, echo = FALSE}
#| label: fig-editors-general
ed_dat_gen <- ed_status [which (ed_status$general), ]
ed_dat_gen$status <- factor (ed_dat_gen$status, levels = c ("FREE", "BUSY", "ON LEAVE"))
ed_dat_gen <- dplyr::group_by (ed_dat_gen, status) |>
    dplyr::arrange (dplyr::desc (inactive_days), .by_group = TRUE) |>
    dplyr::ungroup ()

u <- "https://github.com/ropensci/software-review/issues/"
index_na <- which (is.na (ed_dat_gen$inactive_for))
ed_dat_gen <- dashboard:::add_gt_html (ed_dat_gen, u, what = "inactive_for")
# Rm HTML from rows with no `inactive_for` values:
if (length (index_na) > 0L) {
    ed_dat_gen$inactive_for [index_na] <- "(waiting)"
}

gt::gt (
    ed_dat_gen,
    groupname_col = "status"
) |>
    gt::tab_header ("Editor Status Overview") |>
    gt::cols_hide (c (stats, general, inactive_days, number, state)) |>
    gt::tab_style (
        style = list (gt::cell_fill (color = "#FFFF8088")),
        locations = gt::cells_body (
            columns = c (`editor`, `inactive_for`),
            rows = status == "FREE"
        )
    ) |>
    dashboard:::add_bg_colours ()
```

### Statistical Editors


```{r editor-table, echo = FALSE}
#| label: fig-editors-stats
ed_dat_stats <- ed_status [which (ed_status$stats), ]
ed_dat_stats$status <- factor (ed_dat_stats$status, levels = c ("FREE", "BUSY", "ON LEAVE"))
ed_dat_stats <- dplyr::group_by (ed_dat_stats, status) |>
    dplyr::arrange (dplyr::desc (inactive_days), .by_group = TRUE) |>
    dplyr::ungroup ()

u <- "https://github.com/ropensci/software-review/issues/"
index_na <- which (is.na (ed_dat_stats$inactive_for))
ed_dat_stats <- dashboard:::add_gt_html (ed_dat_stats, u, what = "inactive_for")
if (length (index_na) > 0L) {
    ed_dat_stats$inactive_for [index_na] <- "(waiting)"
}

gt::gt (
    ed_dat_stats,
    groupname_col = "status"
) |>
    gt::tab_header ("Editor Status Overview") |>
    gt::cols_hide (c (stats, inactive_days, number, state)) |>
    gt::tab_style (
        style = list (gt::cell_fill (color = "#FFFF8088")),
        locations = gt::cells_body (
            columns = c (`editor`, `inactive_for`),
            rows = status == "FREE"
        )
    ) |>
    dashboard:::add_bg_colours ()
```

## Numbers of Editors

rOpenSci relies on our team of volunteer editors. We can only provide review
services if we have sufficient numbers of editors available to handle
submissions. It is therefore important to monitor historical trends in overall
editor availability. This first graph shows total numbers of editors over time,
and corresponding lines for numbers of those engaged during each time period in
ongoing reviews, and numbers who are not handling any submissions during each
period and are therefore free to accept new submissions.


```{r ed-availability-prepro, echo = FALSE}
# Use all editors, not just current ones
num_eds_busy <- ed_dat$timeline_total |>
    dplyr::filter (value > 0L) |>
    dplyr::group_by (month) |>
    dplyr::summarise (n = dplyr::n ())

ed_dates <- ed_dat$timeline_total |>
    dplyr::filter (value > 0L) |>
    dplyr::group_by (name) |>
    dplyr::summarise (start = min (month), end = max (month))
ed_dates$end [ed_dates$name %in% ed_status$editor] <- max (ed_dates$end)
ed_dates <- as.matrix (ed_dates [, c ("start", "end")])
dates <- apply (ed_dates, 1, function (i) {
    seq (lubridate::ymd (i [1]), lubridate::ymd (i [2]), by = "quarter") |>
        as.character ()
})
n <- table (unlist (dates))
dates_month <- lubridate::ymd (names (n))
index <- match (dates_month, num_eds_busy$month)

num_eds_total <- num_eds_free <- data.frame (
    month = lubridate::ymd (names (n)),
    n = as.integer (n)
)
index <- match (num_eds_busy$month, num_eds_total$month)
num_eds_free$n [index] <- num_eds_total$n [index] - num_eds_busy$n

# Function to smooth 'busy' and 'free', but not needed in current form.
filter_dat <- function (dat, flen = 5) {
    index <- seq_len (length (dat) - flen + 1) + floor (flen / 2)
    x <- seq_len (flen) - ceiling (flen / 2)
    x <- -abs (x)
    filt <- exp (x)
    filt <- filt / sum (filt)
    dat [index] <- stats::filter (dat, filt) [index]
    return (dat)
}
# num_eds_busy$n <- filter_dat (num_eds_busy$n, flen = 3)
# num_eds_free$n <- filter_dat (num_eds_free$n, flen = 3)

num_eds <- rbind (
    cbind (num_eds_busy, status = "Busy"),
    cbind (num_eds_total, status = "Total"),
    cbind (num_eds_free, status = "Free")
)
```

::: {style="all.initial;"}
```{r timeline-num-eds-plot, echo = FALSE, fig.width = 8, fig.height = 8}
bg_col <- "#DDDDDD55"
ggplot (num_eds, aes (x = month, y = n, colour = status)) +
    geom_line (lwd = 1.0) +
    xlab ("Year") +
    ylab ("Number of editors") +
    theme_minimal () +
    theme (
        plot.background = element_rect (fill = bg_col),
        panel.grid.major = element_line (colour = "#CCCCCC"),
        panel.grid.minor = element_blank (),
        legend.position = "inside",
        legend.position.inside = c (0.1, 0.8),
        axis.text.x = element_text (size = 12),
        axis.text.y = element_text (size = 10),
        axis.title = element_text (size = 14)
    )
```
:::

<br><br>

## Editorial Load {#past-ed-load}

The following graphic summarises the recent workload of our editorial team.
This is intended to be the primary aid used in selecting editors for new
submission. We aim to distribute our workload as evenly as possible across the
editorial team. Editors for new submissions should accordingly be chosen from
those who have had relatively low recent workloads. This graph excludes any
editors who are currently on leave.

```{r ed-summary, echo = FALSE}
# Reduce data to prior year only:
start_date <- lubridate::ymd (Sys.Date ()) - lubridate::years (1L)
start_quarter <- lubridate::quarter (start_date, type = "date_first")
timeline_total <- dplyr::filter (ed_timeline_total, month >= start_quarter) |>
    dplyr::rename (reviews_tot = value) |>
    dplyr::filter (reviews_tot > 0)
timeline_new <- dplyr::filter (ed_timeline_new, month >= start_quarter) |>
    dplyr::rename (reviews_new = value) |>
    dplyr::filter (reviews_new > 0)
annual_vals <- dplyr::left_join (timeline_total, timeline_new, by = c ("name", "month")) |>
    tidyr::replace_na (list (reviews_new = 0)) |>
    dplyr::group_by (name) |>
    dplyr::summarise (reviews_tot = mean (reviews_tot), reviews_new = sum (reviews_new)) |>
    dplyr::mutate (load = reviews_tot * reviews_new) |>
    dplyr::arrange (load)

# And remove any editors who are on leave:
eds_on_leave <- ed_status$editor [which (ed_status$status == "ON LEAVE")]
annual_vals <- dplyr::filter (annual_vals, !(name %in% eds_on_leave))

# Then add bar colours:
ncols <- ceiling (max (annual_vals$load))
cols <- rev (heat.colors (ncols))
annual_vals$col <- cols [floor (annual_vals$load) + 1]
```

::: {style="all.initial;"}
```{r ed-load-plot, echo = FALSE}
break_interval <- 5
xmax <- ceiling (max (annual_vals$load))
breaks <- seq (0, ceiling (xmax / break_interval)) * break_interval
annual_vals$name <- factor (annual_vals$name, levels = rev (annual_vals$name))

ggplot (annual_vals, aes (x = name, y = load, fill = col)) +
    geom_bar (stat = "identity") +
    scale_fill_identity () +
    scale_y_continuous (breaks = breaks) +
    coord_flip () +
    xlab ("") +
    ylab ("Recent estimated workload") +
    theme_minimal () +
    theme (
        plot.background = element_rect (fill = bg_col),
        panel.grid.major = element_line (colour = "#CCCCCC"),
        panel.grid.minor = element_blank (),
        axis.text.x = element_text (size = 12, family = "sans"),
        axis.text.y = element_text (size = 14, family = "sans"),
        axis.title = element_text (size = 14, family = "sans")
    )
```
:::

The "*Recent estimated workload*" values are derived from data presented in the
following two graphs. The first is numbers of concurrent reviews handled by
each editor, and the second is the number of new submissions. The estimated
workload values are calculated over the preceding year by multiplying the total
number of new submissions by the average number of concurrent reviews. High
workloads thus describe editors who have handled both large numbers of new
submissions, and large numbers of concurrent reviews.

### Individual Editor Load: Concurrent Reviews {#ed-load-concurrent}

```{r ed-load-params, echo = FALSE}
min_rev_total <- 0L # Don't show any data for reviews <= this value
span_years <- 2L # Show this many years of data
```

The following two graphs provide more detail behind the editorial workload
chart shown above. The first graph shows numbers of concurrent reviews handled
by editors over the preceding `r span_years` years (with only data over the
preceding single year used in the previous chart). We aim to distribute workloads
across editors as evenly as possible, and this graph should be used to aid that
task. Note that not all editors may be currently available, and the initial
[*Editor Overview*](#editor-overview) should also be consulted to assess actual
availability. 

We have no specific upper limits on numbers of concurrent reviews.
Nevertheless, the [following sub-section](#ed-load-new) describes our
expectation that editors handle no more than one new submission per quarter on
average, or four per year. Presuming reviews last six months on average (see
[*Review Duration*](./history.qmd#review-duration)) means that editors would
generally have two concurrent reviews at any one time. This suggests a general
rule-of-thumb that editors who have recently handled more than that number
should not be assigned further work.

```{r timelines-prepro, echo = FALSE}
start_date <- lubridate::ymd (Sys.Date ()) - lubridate::years (span_years)
start_quarter <- lubridate::quarter (start_date, type = "date_first")
timeline_total <- dplyr::filter (ed_timeline_total, month >= start_quarter) |>
    dplyr::rename (reviews = value) |>
    dplyr::filter (reviews > min_rev_total)

ncols <- diff (range (timeline_total$reviews)) + 1L
cols <- rev (heat.colors (ncols))
timeline_total$col <- cols [timeline_total$reviews - min_rev_total]
max_reviews <- max (timeline_total$reviews)

min_rev_new <- 0L
timeline_new <- dplyr::filter (ed_timeline_new, month >= start_quarter) |>
    dplyr::rename (reviews = value) |>
    dplyr::filter (reviews > min_rev_new)
ncols <- diff (range (timeline_new$reviews)) + 1L
cols <- rev (heat.colors (ncols))
timeline_new$col <- cols [timeline_new$reviews - min_rev_new]
```

```{r set-fig-ht-all, echo = FALSE}
# Scale height of fig to number of editors. The `h0` value of 1 corresponds to
# 8 editors fitting within a square graphic.
opts <- knitr::opts_chunk$get ()
neds <- length (unique (timeline_total$name))
h0 <- 1
ht <- ceiling (h0 * neds)
knitr::opts_chunk$set (fig.height = ht)
```

::: {style="all.initial;"}
```{r timeline_total-plot, echo = FALSE, fig.width = 8}
break_interval <- 4
ymax <- max (timeline_total$reviews)
breaks <- seq (0, ceiling (ymax / break_interval)) * break_interval

qtrs <- lubridate::quarter (timeline_total$month, with_year = TRUE)
qtrs <- gsub ("\\.", ".Q", qtrs)
timeline_total$tt <- paste0 (
    timeline_total$name,
    " ",
    qtrs,
    ": ",
    timeline_total$reviews,
    ifelse (timeline_total$reviews == 1, "review", "reviews")
)

ggplot (timeline_total, aes (x = month, y = reviews, fill = col)) +
    ggiraph::geom_col_interactive (
        width = 80,
        just = 0,
        aes (tooltip = tt, data_id = tt, hover_nearest = FALSE)
    ) +
    scale_y_continuous (position = "left", breaks = breaks) +
    scale_fill_identity () +
    facet_wrap (
        ~name,
        ncol = 1,
        strip.position = "right"
    ) +
    xlab ("Annual Quarter") +
    ylab ("Numbers of concurrent reviews / quarter") +
    theme_minimal () +
    theme (
        plot.background = element_rect (fill = bg_col),
        panel.grid.major = element_line (colour = "#CCCCCC"),
        panel.grid.minor = element_blank (),
        legend.position = "none",
        axis.text.x = element_text (size = 12, family = "sans"),
        axis.text.y = element_text (size = 10, family = "sans"),
        axis.title = element_text (size = 14, family = "sans"),
        strip.text = element_text (size = 14, family = "sans"),
        strip.text.y = element_text (angle = 0, hjust = 0, vjust = 0, family = "sans"),
        strip.clip = "on",
        strip.background = element_blank ()
    ) -> g
ggiraph::girafe (ggobj = g)
```
:::

<br><br>

### Individual Editor Load: New Submissions {#ed-load-new}

This second graph shows the number of *new* submissions per quarter taken on by
each editor. We aim to allocate no more than one new submission to each editor
per quarter, or a maximum of four per year.

```{r set-fig-ht-new, echo = FALSE}
neds <- length (unique (timeline_new$name))
ht <- ceiling (h0 * neds) # h0 defined in previous chunk
knitr::opts_chunk$set (fig.height = ht)
```

::: {style="all.initial;"}
```{r timeline_new-plot, echo = FALSE, fig.width = 8}
break_interval <- 2
ymax <- max (timeline_new$reviews)
breaks <- seq (0, ceiling (ymax / break_interval)) * break_interval

qtrs <- lubridate::quarter (timeline_new$month, with_year = TRUE)
qtrs <- gsub ("\\.", ".Q", qtrs)
timeline_new$tt <- paste0 (
    timeline_new$name,
    " ",
    qtrs,
    ": ",
    timeline_new$reviews,
    " new ",
    ifelse (timeline_new$reviews == 1, "submission", "submissions")
)

ggplot (timeline_new, aes (x = month, y = reviews, fill = col)) +
    ggiraph::geom_col_interactive (
        width = 80,
        just = 0,
        aes (tooltip = tt, data_id = tt, hover_nearest = FALSE)
    ) +
    scale_y_continuous (position = "left", breaks = breaks) +
    scale_fill_identity () +
    facet_wrap (
        ~name,
        ncol = 1,
        strip.position = "right"
    ) +
    xlab ("Annual Quarter") +
    ylab ("Numbers of new reviews / quarter") +
    theme_minimal () +
    theme (
        plot.background = element_rect (fill = bg_col),
        panel.grid.major = element_line (colour = "#CCCCCC"),
        panel.grid.minor = element_blank (),
        legend.position = "none",
        axis.text.x = element_text (size = 12, family = "sans"),
        axis.text.y = element_text (size = 10, family = "sans"),
        axis.title = element_text (size = 14, family = "sans"),
        strip.text = element_text (size = 14, family = "sans"),
        strip.text.y = element_text (angle = 0, hjust = 0, vjust = 0, family = "sans"),
        strip.clip = "on",
        strip.background = element_blank ()
    ) -> g
ggiraph::girafe (ggobj = g)
```
:::

```{r reset-fig-ht, echo = FALSE}
knitr::opts_chunk$set (fig.height = opts$fig.height)
```
