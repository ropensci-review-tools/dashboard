---
title: "rOpenSci Editors"
format: 
  html:
    fig-width: 8
    fig-height: 4
    code-fold: false
---

```{r load-pkg-ed, echo = FALSE, message = FALSE}
library (dashboard)
library (gt)
library (ggplot2)
library (tidyr)
library (dplyr)
```

```{r get-ed-dat, echo = FALSE, message = FALSE}
#| cache: true
aggregation_period <- "quarter"
ed_dat <- editor_status (aggregation_period = aggregation_period, quiet = TRUE)
ed_status <- ed_dat$status
ed_timeline_total <- ed_dat$timeline_total |>
    dplyr::filter (name %in% ed_status$editor)
ed_timeline_new <- ed_dat$timeline_new |>
    dplyr::filter (name %in% ed_status$editor)
```

## Editor Overview {#editor-overview}

This page includes tables summarising the availability of editors, and charts
of historical activity for each editor. This information is intended to help
identify editors who may be available to handle new submissions to rOpenSci's
software peer-review system. Editors should be chosen by first ensuring they
are "FREE" in one of the first two tables. The historical patterns of editorial
activity should then be examined in the subsequent charts. The choice of
editors should also be made in a way that best distributes the recent editorial
loads depicted in the [*Past Editorial Load*](#past-ed-load) section.


```{r has-free, echo = FALSE}
some_eds_are_free <- length (ed_status$stats == "FREE") > 0L
msg <- paste0 (
    "The `inactive_for` column in the first two tables includes values ",
    "hyperlinked to the most recent submission issue for each editor."
)
```
```{r has-no-free-txt, echo = FALSE, results = "asis", eval = !some_eds_are_free}
cat (msg)
```
```{r has-free-txt, echo = FALSE, results = "asis", eval = some_eds_are_free}
cat (paste0 (
    msg,
    " The initial rows are highlighted yellow to ",
    "indicate editors who are currently free."
))
```


```{r editor-add_airtable-data, echo = FALSE}
#| cache: true
edvac <- dashboard::editor_vacation_status ()
editors_on_vacation <- edvac$github [which (edvac$away)]
ed_status$status [ed_status$editor %in% editors_on_vacation] <- "ON LEAVE"
ed_status <- dashboard::add_editor_airtable_data (ed_status)
ed_status <- dplyr::filter (ed_status, editor != "haozhu233") |>
    dplyr::relocate (other_langs, .before = domain_expertise) |>
    dplyr::rename (
        "Languages" = other_langs,
        "Expertise" = domain_expertise
    ) |>
    tidyr::replace_na (list (inactive_for = "(waiting)"))
```

### General Editors


```{r editor-table, echo = FALSE}
#| label: fig-editors-general
ed_dat_gen <- ed_status [which (ed_status$general), ]
ed_dat_gen$status <- factor (ed_dat_gen$status, levels = c ("FREE", "BUSY", "ON LEAVE"))
ed_dat_gen <- dplyr::group_by (ed_dat_gen, status) |>
    dplyr::arrange (dplyr::desc (inactive_days), .by_group = TRUE) |>
    dplyr::ungroup ()

u <- "https://github.com/ropensci/software-review/issues/"
index_na <- which (is.na (ed_dat_gen$inactive_for))
ed_dat_gen <- dashboard:::add_gt_html (ed_dat_gen, u, what = "inactive_for")
# Rm HTML from rows with no `inactive_for` values:
if (length (index_na) > 0L) {
    ed_dat_gen$inactive_for [index_na] <- "(waiting)"
}

gt::gt (
    ed_dat_gen,
    groupname_col = "status"
) |>
    gt::tab_header ("Editor Status Overview") |>
    gt::cols_hide (c (stats, general, inactive_days, number, state)) |>
    gt::tab_style (
        style = list (gt::cell_fill (color = "#FFFF8088")),
        locations = gt::cells_body (
            columns = c (`editor`, `inactive_for`),
            rows = status == "FREE"
        )
    ) |>
    dashboard:::add_bg_colours ()
```

### Statistical Editors


```{r editor-table, echo = FALSE}
#| label: fig-editors-stats
ed_dat_stats <- ed_status [which (ed_status$stats), ]
ed_dat_stats$status <- factor (ed_dat_stats$status, levels = c ("FREE", "BUSY", "ON LEAVE"))
ed_dat_stats <- dplyr::group_by (ed_dat_stats, status) |>
    dplyr::arrange (dplyr::desc (inactive_days), .by_group = TRUE) |>
    dplyr::ungroup ()

u <- "https://github.com/ropensci/software-review/issues/"
index_na <- which (is.na (ed_dat_stats$inactive_for))
ed_dat_stats <- dashboard:::add_gt_html (ed_dat_stats, u, what = "inactive_for")
if (length (index_na) > 0L) {
    ed_dat_stats$inactive_for [index_na] <- "(waiting)"
}

gt::gt (
    ed_dat_stats,
    groupname_col = "status"
) |>
    gt::tab_header ("Editor Status Overview") |>
    gt::cols_hide (c (stats, inactive_days, number, state)) |>
    gt::tab_style (
        style = list (gt::cell_fill (color = "#FFFF8088")),
        locations = gt::cells_body (
            columns = c (`editor`, `inactive_for`),
            rows = status == "FREE"
        )
    ) |>
    dashboard:::add_bg_colours ()
```

## Past Editorial Load {#past-ed-load}

### Editor Availability


rOpenSci relies on our team of volunteer editors. We can only provide review
services if we have sufficient numbers of editors available to handle
submissions. It is therefore important to monitor historical trends in overall
editor availability. This first graph shows total numbers of editors over time,
and corresponding lines for numbers of those engaged during each time period in
ongoing reviews, and numbers who are not handling any submissions during each
period and are therefore free to accept new submissions.


```{r ed-availability-prepro, echo = FALSE}
# Use all editors, not just current ones
num_eds_busy <- ed_dat$timeline_total |>
    dplyr::filter (value > 0L) |>
    dplyr::group_by (month) |>
    dplyr::summarise (n = dplyr::n ())

ed_dates <- ed_dat$timeline_total |>
    dplyr::filter (value > 0L) |>
    dplyr::group_by (name) |>
    dplyr::summarise (start = min (month), end = max (month))
ed_dates$end [ed_dates$name %in% ed_status$editor] <- max (ed_dates$end)
ed_dates <- as.matrix (ed_dates [, c ("start", "end")])
dates <- apply (ed_dates, 1, function (i) {
    seq (lubridate::ymd (i [1]), lubridate::ymd (i [2]), by = "quarter") |>
        as.character ()
})
n <- table (unlist (dates))
dates_month <- lubridate::ymd (names (n))
index <- match (dates_month, num_eds_busy$month)

num_eds_total <- num_eds_free <- data.frame (
    month = lubridate::ymd (names (n)),
    n = as.integer (n)
)
index <- match (num_eds_busy$month, num_eds_total$month)
num_eds_free$n [index] <- num_eds_total$n [index] - num_eds_busy$n

# Function to smooth 'busy' and 'free', but not needed in current form.
filter_dat <- function (dat, flen = 5) {
    index <- seq_len (length (dat) - flen + 1) + floor (flen / 2)
    x <- seq_len (flen) - ceiling (flen / 2)
    x <- -abs (x)
    filt <- exp (x)
    filt <- filt / sum (filt)
    dat [index] <- stats::filter (dat, filt) [index]
    return (dat)
}
# num_eds_busy$n <- filter_dat (num_eds_busy$n, flen = 3)
# num_eds_free$n <- filter_dat (num_eds_free$n, flen = 3)

num_eds <- rbind (
    cbind (num_eds_busy, status = "Busy"),
    cbind (num_eds_total, status = "Total"),
    cbind (num_eds_free, status = "Free")
)
```

::: {style="all.initial;"}
```{r timeline-num-eds-plot, echo = FALSE, fig.width = 8, fig.height = 8}
bg_col <- "#DDDDDD55"
ggplot (num_eds, aes (x = month, y = n, colour = status)) +
    geom_line (lwd = 1.0) +
    xlab ("Year") +
    ylab ("Number of editors") +
    theme_minimal () +
    theme (
        plot.background = element_rect (fill = bg_col),
        panel.grid.major = element_line (colour = "#CCCCCC"),
        panel.grid.minor = element_blank (),
        legend.position = "inside",
        legend.position.inside = c (0.1, 0.8),
        axis.text.x = element_text (size = 12),
        axis.text.y = element_text (size = 10),
        axis.title = element_text (size = 14)
    )
```
:::


### Individual Editor Load

```{r timelines-prepro, echo = FALSE}
min_rev_total <- 0L # Don't show any data for reviews <= this value
span_years <- 2L # Show this many years of data
start_date <- lubridate::ymd (Sys.Date ()) - lubridate::years (span_years)
start_quarter <- lubridate::quarter (start_date, type = "date_first")
timeline_total <- dplyr::filter (ed_timeline_total, month >= start_quarter) |>
    dplyr::rename (reviews = value) |>
    dplyr::filter (reviews > min_rev_total)

ncols <- diff (range (timeline_total$reviews)) + 1L
cols <- rev (heat.colors (ncols))
timeline_total$col <- cols [timeline_total$reviews - min_rev_total]
max_reviews <- max (timeline_total$reviews)

min_rev_new <- 0L
timeline_new <- dplyr::filter (ed_timeline_new, month >= start_quarter) |>
    dplyr::rename (reviews = value) |>
    dplyr::filter (reviews > min_rev_new)
ncols <- diff (range (timeline_new$reviews)) + 1L
cols <- rev (heat.colors (ncols))
timeline_new$col <- cols [timeline_new$reviews - min_rev_new]
```

The following two graphs illustrate the recent and current workloads of
rOpenSci editors. The first graph shows numbers of concurrent reviews handled
by editors over the preceding `r span_years` years. We aim to distribute
workloads across editors as evenly as possible, and this graph should be used
to aid that task. Note that not all editors may be currently available, and the
initial [*Editor Overview*](#editor-overview) should also be consulted to
assess actual availability. 

```{r set-fig-ht-all, echo = FALSE}
# Scale height of fig to number of editors. The `h0` value of 1 corresponds to
# 8 editors fitting within a square graphic.
opts <- knitr::opts_chunk$get ()
neds <- length (unique (timeline_total$name))
h0 <- 1
ht <- ceiling (h0 * neds)
knitr::opts_chunk$set (fig.height = ht)
```

::: {style="all.initial;"}
```{r timeline_total-plot, echo = FALSE, fig.width = 8}
break_interval <- 4
ymax <- max (timeline_total$reviews)
breaks <- seq (0, ceiling (ymax / break_interval)) * break_interval

ggplot (timeline_total, aes (x = month, y = reviews, fill = col)) +
    geom_col (width = 70, just = 0) +
    scale_y_continuous (position = "left", breaks = breaks) +
    scale_fill_identity () +
    facet_wrap (
        ~name,
        ncol = 1,
        strip.position = "right"
    ) +
    xlab ("Annual Quarter") +
    ylab ("Numbers of concurrent reviews / quarter") +
    theme_minimal () +
    theme (
        plot.background = element_rect (fill = bg_col),
        panel.grid.major = element_line (colour = "#CCCCCC"),
        panel.grid.minor = element_blank (),
        legend.position = "none",
        axis.text.x = element_text (size = 12),
        axis.text.y = element_text (size = 10),
        axis.title = element_text (size = 14),
        strip.text = element_text (size = 14),
        strip.text.y = element_text (angle = 0, hjust = 0, vjust = 0),
        strip.clip = "on",
        strip.background = element_blank ()
    )
```
:::

This second graph shows the number of *new* submissions per quarter taken on by
each editor. We aim to keep numbers of new submissions at a maximum of four,
corresponding to average numbers of new submissions per quarter not exceeding
one.

```{r set-fig-ht-new, echo = FALSE}
neds <- length (unique (timeline_new$name))
ht <- ceiling (h0 * neds) # h0 defined in previous chunk
knitr::opts_chunk$set (fig.height = ht)
```

::: {style="all.initial;"}
```{r timeline_new-plot, echo = FALSE, fig.width = 8}
break_interval <- 2
ymax <- max (timeline_new$reviews)
breaks <- seq (0, ceiling (ymax / break_interval)) * break_interval

ggplot (timeline_new, aes (x = month, y = reviews, fill = col)) +
    geom_col (width = 70, just = 0) +
    scale_y_continuous (position = "left", breaks = breaks) +
    scale_fill_identity () +
    facet_wrap (
        ~name,
        ncol = 1,
        strip.position = "right"
    ) +
    xlab ("Annual Quarter") +
    ylab ("Numbers of new reviews / quarter") +
    theme_minimal () +
    theme (
        plot.background = element_rect (fill = bg_col),
        panel.grid.major = element_line (colour = "#CCCCCC"),
        panel.grid.minor = element_blank (),
        legend.position = "none",
        axis.text.x = element_text (size = 12),
        axis.text.y = element_text (size = 10),
        axis.title = element_text (size = 14),
        strip.text = element_text (size = 14),
        strip.text.y = element_text (angle = 0, hjust = 0, vjust = 0),
        strip.clip = "on",
        strip.background = element_blank ()
    )
```
:::

```{r reset-fig-ht, echo = FALSE}
knitr::opts_chunk$set (fig.height = opts$fig.height)
```
