---
title: "rOpenSci Editors"
format: 
  html:
    fig-width: 8
    fig-height: 4
    code-fold: false
---

```{r load-pkg-ed, echo = FALSE, message = FALSE}
library (dashboard)
library (gt)
library (ggplot2)
library (tidyr)
library (dplyr)
library (viridis)
```

```{r get-ed-dat, echo = FALSE, message = FALSE}
#| cache: true
aggregation_period <- "quarter"
ed_dat <- editor_status (aggregation_period = aggregation_period, quiet = TRUE)
ed_status <- ed_dat$status
ed_timeline_total <- ed_dat$timeline_total
ed_timeline_new <- ed_dat$timeline_new
```

## Editor Overview

This page includes tables summarising the availability of editors, and charts
of historical activity for each editor. This information is intended to help
identify editors who may be available to handle new submissions to rOpenSci's
software peer-review system. Editors should be chosen by first ensuring they
are "FREE" in one of the first two tables. The historical patterns of editorial
activity should then be examined in the subsequent charts. The choice of
editors should also be made in a way that best distributes the recent editorial
loads depicted in the [*Past Editorial Load*](#past-ed-load) section.


```{r has-free, echo = FALSE}
some_eds_are_free <- length (ed_status$stats == "FREE") > 0L
msg <- paste0 (
    "The `inactive_for` column in the first two tables includes values ",
    "hyperlinked to the most recent submission issue for each editor."
)
```
```{r has-no-free-txt, echo = FALSE, results = "asis", eval = !some_eds_are_free}
cat (msg)
```
```{r has-free-txt, echo = FALSE, results = "asis", eval = some_eds_are_free}
cat (paste0 (
    msg,
    " The initial rows are highlighted yellow to ",
    "indicate editors who are currently free."
))
```


```{r editor-add_airtable-data, echo = FALSE}
#| cache: true
edvac <- dashboard::editor_vacation_status ()
editors_on_vacation <- edvac$github [which (edvac$away)]
ed_status$status [ed_status$editor %in% editors_on_vacation] <- "ON LEAVE"
ed_status <- dashboard::add_editor_airtable_data (ed_status)
ed_status <- dplyr::filter (ed_status, editor != "haozhu233") |>
    dplyr::relocate (other_langs, .before = domain_expertise) |>
    dplyr::rename (
        "Languages" = other_langs,
        "Expertise" = domain_expertise
    ) |>
    tidyr::replace_na (list (inactive_for = "(waiting)"))
```

### General Editors


```{r editor-table, echo = FALSE}
#| label: fig-editors-general
ed_dat_gen <- ed_status [which (ed_status$general), ]
ed_dat_gen$status <- factor (ed_dat_gen$status, levels = c ("FREE", "BUSY", "ON LEAVE"))
ed_dat_gen <- dplyr::group_by (ed_dat_gen, status) |>
    dplyr::arrange (dplyr::desc (inactive_days), .by_group = TRUE) |>
    dplyr::ungroup ()

u <- "https://github.com/ropensci/software-review/issues/"
index_na <- which (is.na (ed_dat_gen$inactive_for))
ed_dat_gen <- dashboard:::add_gt_html (ed_dat_gen, u, what = "inactive_for")
# Rm HTML from rows with no `inactive_for` values:
if (length (index_na) > 0L) {
    ed_dat_gen$inactive_for [index_na] <- "(waiting)"
}

gt::gt (
    ed_dat_gen,
    groupname_col = "status"
) |>
    gt::tab_header ("Editor Status Overview") |>
    gt::cols_hide (c (stats, general, inactive_days, number, state)) |>
    gt::tab_style (
        style = list (gt::cell_fill (color = "#FFFF8088")),
        locations = gt::cells_body (
            columns = c (`editor`, `inactive_for`),
            rows = status == "FREE"
        )
    ) |>
    dashboard:::add_bg_colours ()
```

### Statistical Editors


```{r editor-table, echo = FALSE}
#| label: fig-editors-stats
ed_dat_stats <- ed_status [which (ed_status$stats), ]
ed_dat_stats$status <- factor (ed_dat_stats$status, levels = c ("FREE", "BUSY", "ON LEAVE"))
ed_dat_stats <- dplyr::group_by (ed_dat_stats, status) |>
    dplyr::arrange (dplyr::desc (inactive_days), .by_group = TRUE) |>
    dplyr::ungroup ()

u <- "https://github.com/ropensci/software-review/issues/"
index_na <- which (is.na (ed_dat_stats$inactive_for))
ed_dat_stats <- dashboard:::add_gt_html (ed_dat_stats, u, what = "inactive_for")
if (length (index_na) > 0L) {
    ed_dat_stats$inactive_for [index_na] <- "(waiting)"
}

gt::gt (
    ed_dat_stats,
    groupname_col = "status"
) |>
    gt::tab_header ("Editor Status Overview") |>
    gt::cols_hide (c (stats, inactive_days, number, state)) |>
    gt::tab_style (
        style = list (gt::cell_fill (color = "#FFFF8088")),
        locations = gt::cells_body (
            columns = c (`editor`, `inactive_for`),
            rows = status == "FREE"
        )
    ) |>
    dashboard:::add_bg_colours ()
```

## Past Editorial Load {#past-ed-load}

```{r timelines-prepro, echo = FALSE}
min_rev_total <- 5L # Don't show any data for reviews <= this value
start_time <- lubridate::ymd ("2016-01-01")
timeline_total <- dplyr::filter (ed_timeline_total, month >= start_time) |>
    dplyr::filter (!name %in% c ("haozhu233")) |>
    dplyr::rename (reviews = value) |>
    dplyr::filter (reviews > min_rev_total)

ncols <- diff (range (timeline_total$reviews)) + 1L
cols <- rev (heat.colors (ncols))
timeline_total$col <- cols [timeline_total$reviews - min_rev_total]
max_reviews <- max (timeline_total$reviews)

min_rev_new <- 2L
timeline_new <- dplyr::filter (ed_timeline_new, month >= start_time) |>
    dplyr::filter (!name %in% c ("haozhu233")) |>
    dplyr::rename (reviews = value) |>
    dplyr::filter (reviews > min_rev_new)
ncols <- diff (range (timeline_new$reviews)) + 1L
cols <- rev (heat.colors (ncols))
timeline_new$col <- cols [timeline_new$reviews - min_rev_new]
```

The following two graphs illustrate the previous workload of rOpenSci editors.
We try to adhere to the following two guidelines:

1. No editor should concurrently handle more than `r min_rev_total` reviews.
2. No editor should handle more than 2 new submissions per quarter.

The first graph shows cases where total numbers of concurrent reviews by
individual editors have exceeded the maximum expected value of `r max_reviews`.
Colors are scaled from very light yellow for just over `r min_rev_total`
concurrent reviews, up to red for the maximum of `r max_reviews` concurrent
reviews.

::: {style="all.initial;"}
```{r timeline_total-plot, echo = FALSE, fig.width = 8, fig.height = 8}
strip_col <- "#12DD4355"
bg_col <- "#DDDDDD55"

ggplot (timeline_total, aes (x = month, y = reviews, fill = col)) +
    geom_col (width = 70) +
    scale_y_continuous (position = "right") +
    scale_fill_identity () +
    facet_wrap (
        ~name,
        ncol = 1,
        strip.position = "left"
    ) +
    xlab ("Year") +
    ylab ("Numbers of concurrent reviews / quarter") +
    theme_minimal () +
    theme (
        plot.background = element_rect (fill = bg_col),
        panel.grid.major = element_line (colour = "#CCCCCC"),
        panel.grid.minor = element_blank (),
        legend.position = "none",
        axis.text.x = element_text (size = 12),
        axis.text.y = element_text (size = 10),
        axis.title = element_text (size = 14),
        strip.text = element_text (size = 20),
        strip.background = element_rect (fill = strip_col, colour = strip_col)
    )
```
:::

This second graph shows cases in which numbers of new submissions per quarter
have exceeded the maximum expected value of `r min_rev_new`.

```{r set-fig-ht, echo = FALSE}
# Scale height of next fig to proportional decrease in number of lines
opts <- knitr::opts_chunk$get ()
n0 <- length (unique (timeline_total$name))
n1 <- length (unique (timeline_new$name))
ht <- ceiling (8 * n1 / n0) + 1
knitr::opts_chunk$set (fig.height = ht)
```

::: {style="all.initial;"}
```{r timeline_new-plot, echo = FALSE, fig.width = 8}
strip_col <- "#12DD4355"
bg_col <- "#DDDDDD55"

ggplot (timeline_new, aes (x = month, y = reviews, fill = col)) +
    geom_col (width = 70) +
    scale_y_continuous (position = "right") +
    scale_fill_identity () +
    facet_wrap (
        ~name,
        ncol = 1,
        strip.position = "left"
    ) +
    xlab ("Year") +
    ylab ("Numbers of concurrent reviews / quarter") +
    theme_minimal () +
    theme (
        plot.background = element_rect (fill = bg_col),
        panel.grid.major = element_line (colour = "#CCCCCC"),
        panel.grid.minor = element_blank (),
        legend.position = "none",
        axis.text.x = element_text (size = 12),
        axis.text.y = element_text (size = 10),
        axis.title = element_text (size = 14),
        strip.text = element_text (size = 20),
        strip.background = element_rect (fill = strip_col, colour = strip_col)
    )
```
:::

```{r reset-fig-ht, echo = FALSE}
knitr::opts_chunk$set (fig.height = opts$fig.height)
```
