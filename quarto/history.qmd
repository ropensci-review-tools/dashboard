---
title: "Historical Data"
execute:
  echo: false
format: 
  html:
    fig-width: 8
    fig-height: 4
    code-fold: false
---

```{r load-pkg, echo = FALSE, message = FALSE}
library (dashboard)
library (lubridate)
```

This page includes several graphs providing insight into the historical
development of rOpenSci's software peer review process. The first three graphs
includes results distinguishing general review from statistical software review
starting from September 2021. Prior to this time, all reviews were "general".


```{r get-rev-history, echo = FALSE}
#| cache: true
dat <- review_history (quiet = TRUE)
```


## Package submissions

This chart shows the total number of packages *submitted for review* each
quarter. A value of 12 per quarter equates to around one submission per week.

```{r history-submissions, echo = FALSE}
# Convert opened/closed dates to monthly sequence This is adapted from the editors
# timeline code in R/editors.R.
get_submissions <- function (dat, period = "quarter") {

    period <- match.arg (period, c ("quarter", "semester"))

    if (period == "quarter") {
        seqs <- lubridate::quarter (dat$opened_at, type = "date_first")
    } else if (period == "semester") {
        seqs <- lubridate::semester (dat$opened_at, with_year = TRUE)
    }
    seq_table <- table (unlist (seqs))
    nms <- names (seq_table)
    if (period == "semester") {
        nms <- gsub ("\\.1$", "-01-01", nms)
        nms <- gsub ("\\.2$", "-07-01", nms)
    }
    data.frame (
        date = lubridate::ymd (nms),
        submissions = as.integer (seq_table)
    )
}

# NOTE: Text needs to be changed to reflect changes in `period` here.
period <- "quarter"
submissions_all <- get_submissions (dat, period = period)
submissions_all$type <- "all"
submissions_all$lty <- 1L
submissions_gen <- get_submissions (dat [which (!dat$stats), ], period = period)
submissions_gen$type <- "general"
submissions_gen$lty <- 2L
submissions_stats <- get_submissions (dat [which (dat$stats), ], period = period)
submissions_stats$type <- "stats"
submissions_stats$lty <- 1L

index <- which (submissions_gen$date %in% submissions_stats$date)
index <- c (min (index) - 1L, index) # To ensure line joins to previous
submissions_gen <- submissions_gen [index, ]

submissions <- rbind (submissions_all, submissions_gen, submissions_stats)
```

```{r ojs-in-submissions, echo = FALSE}
ojs_define (submissions_in = submissions)
```

```{ojs}
submissions = {
    return transpose(submissions_in).map(row => ({
        ...row,
        date: new Date(row.date)
    }));
}
```

```{ojs}
Plot.plot({
    style: `
        overflow: visible;
    `,
    marginLeft: 60,
    marginBottom: 50,
    x: {grid: true},
    y: {grid: true},
    marks: [
        Plot.ruleY([0]),
        Plot.lineY(submissions, {x: "date", y: "submissions", stroke: "type", fontSize: 18}),
        Plot.text(submissions, Plot.selectLast({x: "date", y: "submissions", z: "type", text: "type", textAnchor: "start", dx: 3, fontSize: 18})),
        Plot.axisX({fontSize: 14, label: "", labelArrow: false}),
        Plot.axisX({fontSize: 20, label: "Year", labelAnchor: "center", labelOffset: 40, ticks: []}),
        Plot.axisY({fontSize: 14, label: "", labelArrow: false}),
        Plot.axisY({fontSize: 24, label: "Nr. submissions / quarter", labelAnchor: "center", labelOffset: 55, ticks: []}),
    ]
})
```




## Packages under review

This chart shows numbers of packages *simultaneously under review* each quarter.


```{r history-months, echo = FALSE}
get_reviews <- function (dat, period = "quarter") {
    period <- match.arg (period, c ("quarter", "semester"))

    if (period == "quarter") {
        seqs <- lubridate::quarter (dat$opened_at, type = "date_first")
    } else if (period == "semester") {
        seqs <- lubridate::semester (dat$opened_at, with_year = TRUE)
    }
    dat$closed_at [which (is.na (dat$closed_at))] <- Sys.Date ()
    date_seqs <- lapply (seq_len (nrow (dat)), function (i) {
        s <- seq (dat$opened_at [i], dat$closed_at [i], by = "1 month")
        if (period == "quarter") {
            s <- unique (lubridate::quarter (s, type = "date_first"))
        } else if (period == "semester") {
            s <- as.character (unique (lubridate::semester (s, with_year = TRUE)))
            s <- gsub ("\\.1$", "-01-01", s)
            s <- gsub ("\\.2$", "-07-01", s)
            s <- lubridate::ymd (s)
        }
        return (as.character (s))
    })
    date_seq_table <- table (unlist (date_seqs))
    data.frame (
        date = lubridate::ymd (names (date_seq_table)),
        reviews = as.integer (date_seq_table)
    )
}

reviews_all <- get_reviews (dat)
reviews_all$type <- "all"
reviews_all$lty <- 1L
reviews_gen <- get_reviews (dat [which (!dat$stats), ])
reviews_gen$type <- "general"
reviews_gen$lty <- 2L
reviews_stats <- get_reviews (dat [which (dat$stats), ])
reviews_stats$type <- "stats"
reviews_stats$lty <- 1L

index <- which (reviews_gen$date %in% reviews_stats$date)
index <- c (min (index) - 1L, index) # To ensure line joins to previous
reviews_gen <- reviews_gen [index, ]

reviews <- rbind (reviews_all, reviews_gen, reviews_stats)
```

```{r ojs-in-reviews, echo = FALSE}
ojs_define (reviews_in = reviews)
```

```{ojs}
reviews = {
    return transpose(reviews_in).map(row => ({
        ...row,
        date: new Date(row.date)
    }));
}
```

```{ojs}
Plot.plot({
    style: `
        overflow: visible;
    `,
    marginLeft: 60,
    marginBottom: 50,
    x: {grid: true},
    y: {grid: true},
    marks: [
        Plot.ruleY([0]),
        Plot.lineY(reviews, {x: "date", y: "reviews", stroke: "type", fontSize: 18}),
        Plot.text(reviews, Plot.selectLast({x: "date", y: "reviews", z: "type", text: "type", textAnchor: "start", dx: 3, fontSize: 18})),
        Plot.axisX({fontSize: 14, label: "", labelArrow: false}),
        Plot.axisX({fontSize: 20, label: "Year", labelAnchor: "center", labelOffset: 40, ticks: []}),
        Plot.axisY({fontSize: 14, label: "", labelArrow: false}),
        Plot.axisY({fontSize: 24, label: "Nr. active reviews / quarter", labelAnchor: "center", labelOffset: 55, ticks: []}),
    ]
})
```


## Review duration {#review-duration}

The next chart shows the average duration of the review process, plotted
against the months in which each review started. (The data have been slightly
smoothed to aid visual display.)

```{r rev-duration, echo = FALSE}
dat_closed <- dat [which (dat$state == "CLOSED"), ]
period <- "quarter" # (month, quarter, semester)

get_rev_durations <- function (dat, period = "quarter", flen = 3) {

    period <- match.arg (period, c ("quarter", "semester"))

    if (period == "month") {
        dates <- paste0 (format (dat$opened_at, "%Y-%m"), "-01")
    } else if (period == "quarter") {
        dates <- lubridate::quarter (dat$opened_at, type = "date_first")
    } else if (period == "semester") {
        s <- lubridate::semester (dat$opened_at)
        dates <- paste0 (
            lubridate::year (dat$opened_at),
            c ("-01-01", "-07-01") [s]
        )
    }

    rev_dur <- data.frame (
        date = lubridate::ymd (dates),
        duration = dat$duration_days * 12 / 365
    ) |>
        dplyr::group_by (date) |>
        dplyr::summarise (dur = mean (duration, na.rm = TRUE))
    # Those quarterly data are quite jumpy, so apply a filter:
    filter_dat <- function (dat, flen = 5) {
        index <- seq_len (length (dat) - flen + 1) + floor (flen / 2)
        x <- seq_len (flen) - ceiling (flen / 2)
        x <- -abs (x)
        filt <- exp (x)
        filt <- filt / sum (filt)
        dat [index] <- stats::filter (dat, filt) [index]
        return (dat)
    }
    rev_dur$dur <- filter_dat (rev_dur$dur, flen = flen)

    return (rev_dur)
}

rev_dur_all <- get_rev_durations (dat_closed)
rev_dur_all$type <- "all"
rev_dur_all$lty <- 1L
rev_dur_gen <- get_rev_durations (dat_closed [which (!dat_closed$stats), ])
rev_dur_gen$type <- "general"
rev_dur_gen$lty <- 2L
rev_dur_stats <- get_rev_durations (dat_closed [which (dat_closed$stats), ])
rev_dur_stats$type <- "stats"
rev_dur_stats$lty <- 1L

index <- which (rev_dur_gen$date %in% rev_dur_stats$date)
index <- c (min (index) - 1L, index) # To ensure line joins to previous
rev_dur_gen <- rev_dur_gen [index, ]

rev_dur <- rbind (rev_dur_all, rev_dur_gen, rev_dur_stats)
```

```{r ojs-in-revdur, echo = FALSE}
ojs_define (revDurIn = rev_dur)
```

```{ojs}
revDur = {
    return transpose(revDurIn).map(row => ({
        ...row,
        date: new Date(row.date)
    }));
}

maxRev = 1.05 * Math.max(...revDur.map(d => d.type === "all" && d.dur));
```

```{ojs}
Plot.plot({
    style: `
        overflow: visible;
    `,
    marginLeft: 60,
    marginBottom: 50,
    x: {grid: true},
    y: {grid: true, domain: [0, maxRev]},
    marks: [
        Plot.ruleY([0]),
        Plot.lineY(revDur, {x: "date", y: "dur", stroke: "type", fontSize: 18}),
        Plot.text(revDur, Plot.selectLast({x: "date", y: "dur", z: "type", text: "type", textAnchor: "start", dx: 4, fontSize: 18})),
        Plot.axisX({fontSize: 14, label: "", labelArrow: false}),
        Plot.axisX({fontSize: 20, label: "Year", labelAnchor: "center", labelOffset: 40, ticks: []}),
        Plot.axisY({fontSize: 14, label: "", labelArrow: false}),
        Plot.axisY({fontSize: 24, label: "Review duration (months)", labelAnchor: "center", labelOffset: 55, ticks: []}),
    ]
})
```


## Numbers of Editors

```{r get-ed-dat-history, echo = FALSE, message = FALSE}
#| cache: true
aggregation_period <- "quarter" # default
ed_dat <- editor_status (quiet = TRUE, aggregation_period = aggregation_period)
ed_status <- ed_dat$status
```

```{r clean-editor-status-history, echo = FALSE}
# Taken straight from editors.qmd
#| cache: false
eds_to_rm <- dashboard:::eds_to_remove
ed_status <- dplyr::filter (ed_status, !editor %in% eds_to_rm) |>
    dplyr::relocate (other_langs, .before = domain_expertise) |>
    dplyr::rename (
        "Languages" = other_langs,
        "Expertise" = domain_expertise
    ) |>
    tidyr::replace_na (list (inactive_for = "(waiting)"))
```

rOpenSci relies on our team of volunteer editors. We can only provide review
services if we have sufficient numbers of editors available to handle
submissions. It is therefore important to monitor historical trends in overall
editor availability. This graph shows total numbers of editors over time, and
corresponding lines for numbers of those engaged during each time period in
ongoing reviews ("Busy"), and numbers who are not handling any submissions
during each period and are therefore free to accept new submissions ("Free").


```{r ed-availability-prepro, echo = FALSE}
# Use all editors, not just current ones
num_eds_busy <- ed_dat$timeline_total |>
    dplyr::filter (value > 0L) |>
    dplyr::group_by (month) |>
    dplyr::summarise (n = dplyr::n ())

ed_dates <- ed_dat$timeline_total |>
    dplyr::filter (value > 0L) |>
    dplyr::group_by (name) |>
    dplyr::summarise (start = min (month), end = max (month))
ed_dates$end [ed_dates$name %in% ed_status$editor] <- max (ed_dates$end)
ed_dates <- as.matrix (ed_dates [, c ("start", "end")])
dates <- apply (ed_dates, 1, function (i) {
    seq (lubridate::ymd (i [1]), lubridate::ymd (i [2]), by = "quarter") |>
        as.character ()
})
n <- table (unlist (dates))
dates_month <- lubridate::ymd (names (n))
index <- match (dates_month, num_eds_busy$month)

num_eds_total <- num_eds_free <- data.frame (
    month = lubridate::ymd (names (n)),
    n = as.integer (n)
)
index <- match (num_eds_busy$month, num_eds_total$month)
num_eds_free$n [index] <- num_eds_total$n [index] - num_eds_busy$n

# Function to smooth 'busy' and 'free', but not needed in current form.
filter_dat <- function (dat, flen = 5) {
    index <- seq_len (length (dat) - flen + 1) + floor (flen / 2)
    x <- seq_len (flen) - ceiling (flen / 2)
    x <- -abs (x)
    filt <- exp (x)
    filt <- filt / sum (filt)
    dat [index] <- stats::filter (dat, filt) [index]
    return (dat)
}
# num_eds_busy$n <- filter_dat (num_eds_busy$n, flen = 3)
# num_eds_free$n <- filter_dat (num_eds_free$n, flen = 3)

num_eds <- rbind (
    cbind (num_eds_busy, status = "Busy"),
    cbind (num_eds_total, status = "Total"),
    cbind (num_eds_free, status = "Free")
)
```

```{r ojs-in-numeds, echo = FALSE}
ojs_define (numEdsIn = num_eds)
```

```{ojs}
numEds = {
    return transpose(numEdsIn).map(row => ({
        ...row,
        month: new Date(row.month)
    }));
}
```

```{ojs}
Plot.plot({
    style: `
        overflow: visible;
    `,
    marginLeft: 60,
    marginBottom: 50,
    x: {grid: true},
    y: {grid: true},
    marks: [
        Plot.ruleY([0]),
        Plot.lineY(numEds, {x: "month", y: "n", stroke: "status", fontSize: 18}),
        Plot.text(numEds, Plot.selectLast({x: "month", y: "n", z: "status", text: "status", textAnchor: "start", dx: 4, fontSize: 18})),
        Plot.axisX({fontSize: 14, label: "", labelArrow: false}),
        Plot.axisX({fontSize: 20, label: "Year", labelAnchor: "center", labelOffset: 40, ticks: []}),
        Plot.axisY({fontSize: 14, label: "", labelArrow: false}),
        Plot.axisY({fontSize: 24, label: "Number of editors", labelAnchor: "center", labelOffset: 55, ticks: []}),
    ]
})
```
