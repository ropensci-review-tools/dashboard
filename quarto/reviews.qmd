---
title: "Software Review Overview"
execute:
  echo: false
format: 
  html:
    fig-width: 8
    fig-height: 4
    code-fold: false
---

```{r load-pkg-rev, echo = FALSE, message = FALSE}
library (dashboard)
library (gt)
```

```{r get-rev-dat, echo = FALSE}
#| cache: true
rev_dat <- review_status (open_only = TRUE, browse = FALSE, quiet = TRUE)
has_multiple_stages <- !is.null (attr (rev_dat, "multiple_stages"))
```

```{r multiple-stages, eval = has_multiple_stages, echo = FALSE, results = "asis"}
stages <- attr (rev_dat, "multiple_stages")
u <- "https://github.com/ropensci/software-review/issues/"
stages <- paste0 ("[", stages, "](", u, stages, ")")
stages <- paste0 (stages, collapse = ", ")
iss <- ifelse (length (stages) > 1L, "issues", "issue")
v <- ifelse (length (stages) > 1L, "have", "has")
cat (paste0 (
    "<hr><span style='color:red'>The following ",
    iss, " ", v,
    " multiple stages:<br></span><p>",
    stages,
    "</p><hr>"
))
```


```{r add-html-to-table, echo = FALSE}
u <- "https://github.com/ropensci/software-review/issues/"
rev_dat$stage_num <- as.integer (substr (rev_dat$stage, 1, 1))
dat <- rev_dat
# Number has to come last here!!
dat <- dashboard:::add_gt_html (dat, u, "title")
dat <- dashboard:::add_gt_html (dat, u, "number")
```

```{r add-urgency-column, echo = FALSE}
# Then create an "urgency" column used to highlight rows needing urgent
# attention. Note that colours have to be individually hand-coded in the
# `gt` code below, so use of any value other than `ncols = 5` requires the
# subsequent colors to be re-coded.
ncols <- 5L
dat$urgency <- rev_dat$urgency <- 0L

# time scales for each stage, in days
time_scales <- list (
    c (0, 7), # initial editorial handling
    c (1, 7), # editor checks
    c (2, 14), # seeking reviewers
    c (3, 21), # reviews
    c (4, 21), # author responses
    c (5, 21) # reviewer responses
)
for (i in time_scales) {
    index <- grep (paste0 ("^", i [1]), dat$stage)
    dat$urgency [index] <-
        floor (as.numeric (dat$elapsed_days [index]) / i [2])
    rev_dat$urgency [index] <-
        floor (as.numeric (rev_dat$elapsed_days [index]) / i [2])
}

dat$urgency [dat$urgency > ncols] <- ncols
dat$urgency [grepl ("holding", dat$labels)] <- 0
dat_holding <- dat [grep ("holding", dat$labels), ] # Done at end
dat <- dat [which (!grepl ("holding", dat$labels)), ]

rev_dat$urgency [rev_dat$urgency > ncols] <- ncols
rev_dat$urgency [grepl ("holding", rev_dat$labels)] <- 0

rev_dat <- dplyr::rename (rev_dat, "inactive_for" = elapsed)
```

```{r dat-stages, echo = FALSE}
sub_types <- table (dat$submission_type)
```

There are currently:<br>

- `r sub_types [["Pre-submission"]]` pre-submission issues<br>
- `r sub_types [["Standard"]]` standard issues<br>
- `r sub_types [["Stats"]]` stats issues

Some cells in the following tables are highlighted to visually indicate the
following degrees of urgency. Levels of urgency depend on the review stage.
Approximate expected times required to complete each stage are:

stage | time (days)
--- | ---
0\/Pre-submission | 7
1\/Editor Checks | 7
2\/Seeking Reviewers | 14
3\/Reviewer(s) Assigned | 21
4\/Review(s) in Awaiting Changes | 21
5\/Awaiting Reviewer(s) Response | 21

Levels of urgency for each review are times taken for current stage as
a multiple of those base times, with values rounded *down* to nearest integer.
For example, a submission which has been undergoing `1\/Editor Checks` for 17
days would have an urgency of `floor(17/7) = 2`. A submission which has been
under review (stage `3\/Reviewer(s) Assigned`) for 12 weeks would have an
urgency of `floor(12 * 7 / 21) = 4`. The colour codes for these urgency levels
are shown in the following table.

```{r colour-scheme, echo = FALSE}
cols <- dashboard:::define_urgency_colours ()
udat <- data.frame (
    urgency = seq_along (cols),
    importance = c (
        "low",
        "moderate",
        "medium",
        "high",
        "very high"
    )
)
```


```{r}
ojs_define (submissions = rev_dat)
# And define dummy data for urgency color scheme:
urgency_dat <- data.frame (
    urgency = 1:5,
    importance = c (
        "low",
        "moderate",
        "medium",
        "high",
        "very high"
    )
)
ojs_define (urgency = urgency_dat)
```

```{ojs}
urgencyDat = transpose(urgency).map(row => ({
    ...row,
    rowColor: row.urgency === 1 ? "#FFFF8088" :
        row.urgency === 2 ? "#FFFF0088" :
        row.urgency === 3 ? "#FFAA0088" :
        row.urgency === 4 ? "#FF550088" :
        row.urgency === 5 ? "#FF000088" : "transparent",
}));
```

```{ojs}
colorTable(urgencyDat, {
    columns: ["urgency", "importance"],
    colorColumn: "rowColor",
})
```



```{ojs}
submissionsIn = {
    return transpose(submissions).map(row => ({
        ...row,
        rowColor: row.urgency === 1 ? "#FFFF8088" :
            row.urgency === 2 ? "#FFFF0088" :
            row.urgency === 3 ? "#FFAA0088" :
            row.urgency === 4 ? "#FF550088" :
            row.urgency === 5 ? "#FF000088" : "transparent",
    }));
}
```
```{ojs}
viewof stage = Inputs.checkbox(
    ["0/presubmission",
     "1/editor-checks",
     "2/seeking-reviewer(s)",
     "3/reviewer(s)-assigned",
     "4/review(s)-in-awaiting-changes",
     "5/awaiting-reviewer(s)-response"
    ],
    { value: [
        "0/presubmission",
        "1/editor-checks",
        // "2/seeking-reviewer(s)",
        // "3/reviewer(s)-assigned",
        // "4/review(s)-in-awaiting-changes",
        // "5/awaiting-reviewer(s)-response"
      ],
      label: "Submission Stage:" }
)
```

```{ojs}
filtered = submissionsIn.filter(function(submission) {
  return stage.includes(submission.stage);
})
sortCol1 = "stage"
sortCol2 = "elapsed_days"

// Sorts by both stage and elapsed days:
filteredSorted = filtered.sort((a, b) => {
    if (a[sortCol1] > b[sortCol1]) {
        return 1;
    } else if (a[sortCol1] < b[sortCol1]) {
        return -1;
    } else {
        if (a[sortCol2] < b[sortCol2]) {
            return 1;
        } else if (a[sortCol2] > b[sortCol2]) {
            return -1;
        }
    }
    return 0;
});
```

{{< include _colorTable_fn.qmd >}}


```{ojs}
// And this uses the 'reviewTable' function defined in the above file to
// generate an Observable Inputs.table with coloured rows.
columns = ["stage_num", "number", "title", "stats", "stage_date", "editor", "inactive_for"]
reviewTable(filteredSorted,
  {
    colorColumn: "rowColor",
    issueNumColumn: "number",
    titleColumn: "title",
    columns: columns,
    height: 'auto',
    layout: 'auto',
    header: {
        stage_num: "Stage",
        number: "Number",
        title: "Title",
        stats: "Stats?",
        stage_date: "Stage date",
        inactive_for: "Inactive for",
    }
  }
)
```
