---
title: "Software Review"
execute:
  echo: false
format: 
  html:
    fig-width: 8
    fig-height: 4
    code-fold: false
---

```{r load-pkg-rev, echo = FALSE, message = FALSE}
library (dashboard)
```

```{r get-rev-dat, echo = FALSE}
#| cache: true
rev_dat <- review_status (open_only = TRUE, browse = FALSE, quiet = TRUE)
has_multiple_stages <- !is.null (attr (rev_dat, "multiple_stages"))
```

## Current Reviews

```{r multiple-stages, eval = has_multiple_stages, echo = FALSE, results = "asis"}
# Chunk to print details of any reviews which have multiple stage labels.
# If there are none, this chunk has no effect.
stages <- attr (rev_dat, "multiple_stages")
u <- "https://github.com/ropensci/software-review/issues/"
stages <- paste0 ("[", stages, "](", u, stages, ")")
stages <- paste0 (stages, collapse = ", ")
iss <- ifelse (length (stages) > 1L, "issues", "issue")
v <- ifelse (length (stages) > 1L, "have", "has")
cat (paste0 (
    "<hr><span style='color:red'>The following ",
    iss, " ", v,
    " multiple stages:<br></span><p>",
    stages,
    "</p><hr>"
))
```


```{r add-urgency-column, echo = FALSE}
# This chunk creates an "urgency" column used to highlight rows needing urgent
# attention. Note that colours have to be individually hand-coded below, so
# use of any value other than `ncols = 5` requires the subsequent colors to
# be re-coded.
rev_dat$stage_num <- as.integer (substr (rev_dat$stage, 1, 1))
index <- which (is.na (rev_dat$stage_num))
rev_dat$stage_num [index] <- -1
rev_dat$stage [index] <- "(No stage)"
ncols <- 5L
rev_dat$urgency <- 0L
# rev_dat$urgency [index] <- ncols

# time scales for each stage, in days
time_scales <- list (
    c (-1, 7), # pre-submission
    c (0, 7), # initial editorial handling
    c (1, 7), # editor checks
    c (2, 14), # seeking reviewers
    c (3, 21), # reviews
    c (4, 21), # author responses
    c (5, 21) # reviewer responses
)
for (i in time_scales) {
    index <- grep (paste0 ("^", i [1]), rev_dat$stage)
    rev_dat$urgency [index] <-
        floor (as.numeric (rev_dat$elapsed_days [index]) / i [2])
}

rev_dat$urgency [rev_dat$urgency > ncols] <- ncols
rev_dat$urgency [grepl ("holding", rev_dat$labels)] <- 0

rev_dat <- dplyr::rename (rev_dat, "inactive_for" = elapsed)
```

```{r dat-stages, echo = FALSE}
# Chunk to derive values to be printed in the text strings that follow:
sub_types <- table (rev_dat$submission_type)
sub_type_end <- rep ("issue", length (sub_types))
sub_type_end [sub_types > 1] <- "issues"
names (sub_type_end) <- names (sub_types)
```

rOpenSci software peer-review is currently handling:<br>

- `r sub_types [["Pre-submission"]]` pre-submission `r sub_type_end [["Pre-submission"]]`<br>
- `r sub_types [["Standard"]]` standard `r sub_type_end [["Standard"]]`<br>
- `r sub_types [["Stats"]]` stats `r sub_type_end [["Stats"]]`

The following table provides details of each issue, with results filtered by
the following controls:

- "Submission Stage" to list issues with the specified stage.
- "Holding" to list issues which are on hold (true) or not (false).
- "Sort By" to sort results either by the Submission Stage ("stage", 0-5), or
  "urgency", as described below.

```{r table-explanation, echo = FALSE, results = 'asis'}
txt <- paste (
    "Some rows in the table are highlighted to visually indicate degrees",
    "of urgency according to the scheme defined in the following",
    "sub-section. Rows with no highlight may be considered up-to-date,",
    "and require no action."
)
has_no_stage <- any (rev_dat$stage_num < 0)
if (has_no_stage) {
    txt <- paste (
        txt,
        "Submissions which have not yet been given a 'Stage' label are",
        "listed below as '(No stage)', and highlighted with the highest",
        "urgency level."
    )
}
cat (txt)
```

```{r rev-dat-prepro}
# Final pre-processing to add 'holding' column, and an 'urgency_rev' column so
# urgency can be sorted via same code as stage.
rev_dat$holding <- grepl ("holding", rev_dat$labels)
rev_dat$urgency_rev <- max (rev_dat$urgency) - rev_dat$urgency
```



```{r}
ojs_define (submissions = rev_dat)
# And define dummy data for urgency color scheme:
urgency_dat <- data.frame (
    urgency = 1:5,
    importance = c (
        "low",
        "moderate",
        "medium",
        "high",
        "very high"
    )
)
ojs_define (urgency = urgency_dat)
```


```{ojs}
urgency_colours = ["#FFFF8088", "#FFFF0088", "#FFAA0088", "#FF550088", "#FF000088"]

submissionsIn = {
    return transpose(submissions).map(row => ({
        ...row,
        rowColor: row.urgency === 1 ? urgency_colours[0] :
            row.urgency === 2 ? urgency_colours[1] :
            row.urgency === 3 ? urgency_colours[2] :
            row.urgency === 4 ? urgency_colours[3] :
            row.urgency === 5 ? urgency_colours[4] : "transparent",
    }));
}
```
```{ojs}
viewof stage = {
    const input =  Inputs.checkbox(
        ["(No stage)",
         "0/presubmission",
         "0/editorial-team-prep",
         "1/editor-checks",
         "2/seeking-reviewer(s)",
         "3/reviewer(s)-assigned",
         "4/review(s)-in-awaiting-changes",
         "5/awaiting-reviewer(s)-response"
        ],
        {
            value: [
                "(No stage)",
                "0/presubmission",
                "0/editorial-team-prep",
                "1/editor-checks",
                "2/seeking-reviewer(s)",
                "3/reviewer(s)-assigned",
                "4/review(s)-in-awaiting-changes",
                "5/awaiting-reviewer(s)-response"
            ],
            label: htl.html`<b>Submission Stage:</b>`,
        }
    );

    // Modification ideas from
    // https://talk.observablehq.com/t/what-is-the-best-way-to-style-an-input-checkbox/7690/2
    const scope = DOM.uid().id;
    input.classList.add(scope);

    input.append(htl.html`<style>
    .${scope} > div, .${scope} > div label { display: flex; flex-wrap: wrap; gap: 10px; width: 300px }
    `)

    return input;
}
```

<div style="margin-top: 20px; margin-bottom: 20px;"></div>

```{ojs}
viewof holding = Inputs.checkbox(
    [true, false],
    {
        value: [false],
        label: htl.html`<b>Holding:</b>`,
    }
)
```

<div style="margin-top: 20px; margin-bottom: 20px;"></div>

```{ojs}
viewof sortBy = Inputs.radio(
    ["stage", "urgency"],
    {
        value: "stage",
        label: htl.html`<b>Sort by:</b>`,
    }
)
```

<div style="margin-top: 20px; margin-bottom: 20px;"></div>

```{ojs}
filtered = submissionsIn.filter(function(submission) {
  return stage.includes(submission.stage) &&
    holding.includes(submission.holding)
})
// Only sort by urgency if there are any:
anyUrgent = filtered.some(submission => submission.urgency > 0)
sortCol1 = sortBy === "stage" ? "stage" : anyUrgent ? "urgency_rev" : "stage"
sortCol2 = "elapsed_days"

// Sorts by both stage and elapsed days:
filteredSorted = filtered.sort((a, b) => {
    if (a[sortCol1] > b[sortCol1]) {
        return 1;
    } else if (a[sortCol1] < b[sortCol1]) {
        return -1;
    } else {
        if (a[sortCol2] < b[sortCol2]) {
            return 1;
        } else if (a[sortCol2] > b[sortCol2]) {
            return -1;
        }
    }
    return 0;
});
```

{{< include _colorTable_fn.qmd >}}


```{ojs}
// And this uses the 'reviewTable' function defined in the above file to
// generate an Observable Inputs.table with coloured rows.
columns = ["stage_num", "number", "title", "stats", "stage_date", "editor", "inactive_for"]
reviewTable(filteredSorted,
  {
    colorColumn: "rowColor",
    issueNumColumn: "number",
    titleColumn: "title",
    columns: columns,
    height: 'auto',
    layout: 'auto',
    header: {
        stage_num: "Stage",
        number: "Number",
        title: "Title",
        stats: "Stats?",
        stage_date: "Stage date",
        inactive_for: "Inactive for",
    },
    format: {
        stage_num: s => s === -1 ? "(No stage)" : s,
    }
  }
)
```

<br>


## Urgency of Reviews

Levels of urgency used in the previous table are coloured according to the
following scheme:

```{ojs}
urgencyDat = transpose(urgency).map(row => ({
    ...row,
    rowColor: row.urgency === 1 ? urgency_colours[0] :
        row.urgency === 2 ? urgency_colours[1] :
        row.urgency === 3 ? urgency_colours[2] :
        row.urgency === 4 ? urgency_colours[3] :
        row.urgency === 5 ? urgency_colours[4] : "transparent",
}));
```

```{ojs}
colorTable(urgencyDat, {
    columns: ["urgency", "importance"],
    colorColumn: "rowColor",
})
```

Levels of urgency are calculated from the following expected times for each
review stage:

stage | time (days)
--- | ---
0\/Pre-submission | 7
1\/Editor Checks | 7
2\/Seeking Reviewers | 14
3\/Reviewer(s) Assigned | 21
4\/Review(s) in Awaiting Changes | 21
5\/Awaiting Reviewer(s) Response | 21

<div style="margin-top: 20px; margin-bottom: 20px;"></div>

Levels of urgency for each review are times taken for current stage as
a multiple of those base times, with values rounded *down* to nearest integer.
For example, a submission which has been undergoing `1\/Editor Checks` for 17
days would have an urgency of `floor(17/7) = 2`. A submission which has been
under review (stage `3\/Reviewer(s) Assigned`) for 12 weeks would have an
urgency of `floor(12 * 7 / 21) = 4`. These urgency levels then map on to the
colour codes shown above.
